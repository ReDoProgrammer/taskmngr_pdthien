<div class="panel panel-info">
  <div class="panel-heading font-weight-bold">Style list</div>
  <div class="panel-body">

    <div class="form-row">
      <div class="form-group col-md-3 col-sm-3 col-xs-12">
        <label for="">National Style</label>
        <select name="" id="slNationalStyle" class="form-control">
          <option value="">US Style</option>
        </select>
      </div>

      <div class="form-group col-md-2 col-sm-3 col-xs-12">
        <label for="">Output</label>
        <select name="" id="slOutput" class="form-control"></select>
      </div>
      <div class="form-group col-md-3 col-sm-6 col-xs-12">
        <label for="">Size</label>
        <select name="" id="slSize" class="form-control"></select>
      </div>

      <div class="form-group col-md-2 col-sm-6 col-xs-12">
        <label for="">Color mode</label>
        <select name="" id="slColorMode" class="form-control"> </select>
      </div>

      <div class="form-group col-md-2 col-sm-6 col-xs-12">
        <label for="">Cloud</label>
        <select name="" id="slCloud" class="form-control"></select>
      </div>

    </div>






    <div class="form-row mt-2">

      <div class="form-group col-md-3 col-sm-6 col-xs-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="ckbAlign" />
          <label class="form-check-label" for="defaultCheck1"> Align </label>
        </div>
        <input type="text" name="" id="txtAlign" class="form-control" placeholder="Align note" />
      </div>



      <div class="form-group col-md-2 col-sm-6 col-xs-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="ckbTV" />
          <label class="form-check-label" for="defaultCheck1"> TV </label>
        </div>
        <input type="text" name="" id="txtTV" class="form-control" placeholder="TV note" />
      </div>

      <div class="form-group col-md-3 col-sm-4 col-xs-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="ckbGrass" />
          <label class="form-check-label" for="defaultCheck1">
            Grass
          </label>
        </div>
        <input type="text" name="" id="txtGrass" class="form-control" placeholder="Grass note" />
      </div>

      <div class="form-group col-md-2 col-sm-4 col-xs-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="ckbSky" />
          <label class="form-check-label" for="defaultCheck1">
            Sky
          </label>
        </div>
        <input type="text" name="" id="txtSky" class="form-control" placeholder="Sky note" />
      </div>

      <div class="form-group col-md-2 col-sm-4 col-xs-12">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="ckbFire" />
          <label class="form-check-label" for="defaultCheck1">
            Fire
          </label>
        </div>
        <input type="text" name="" id="txtFire" class="form-control" placeholder="Fire note" />
      </div>

    </div>

    <div class="form-row">

      <div class="form-group col-md-12">
        <label for="">Style note:</label>
        <input type="text" name="" id="txtRemark" class="form-control" placeholder="Style note" />
      </div>
    </div>



  </div>
</div>

<script>
  $(document).ready(function () {
    //mặc định không cho nhập giá trị cho các textbox dưới đây ( readonly = true)
    //chỉ khi nào các checkbox tương ứng đc tick thì mới cho nhập

    $("#txtAlign").prop("readonly", true);
    $("#txtTV").prop("readonly", true);
    $("#txtGrass").prop("readonly", true);
    $("#txtSky").prop("readonly", true);
    $("#txtFire").prop("readonly", true);

    //load các dữ liệu cơ sở
    LoadOutput();
    LoadSize();
    LoadColorMode();
    LoadCloud();
    LoadNationalStyle();
  });

  $("#ckbAlign").on("change", function () {
    // on change of state
    if (this.checked) {
      // if changed state is "CHECKED"
      $("#txtAlign").prop("readonly", false);
    } else {
      $("#txtAlign").prop("readonly", true);
      $("#txtAlign").val("");
    }
  });

  $("#ckbTV").on("change", function () {
    // on change of state
    if (this.checked) {
      // if changed state is "CHECKED"
      $("#txtTV").prop("readonly", false);
    } else {
      $("#txtTV").prop("readonly", true);
      $("#txtTV").val("");
    }
  });

  $("#ckbGrass").on("change", function () {
    // on change of state
    if (this.checked) {
      // if changed state is "CHECKED"
      $("#txtGrass").prop("readonly", false);
    } else {
      $("#txtGrass").prop("readonly", true);
      $("#txtGrass").val("");
    }
  });

  $("#ckbSky").on("change", function () {
    // on change of state
    if (this.checked) {
      // if changed state is "CHECKED"
      $("#txtSky").prop("readonly", false);
    } else {
      $("#txtSky").prop("readonly", true);
      $("#txtSky").val("");
    }
  });

  $("#ckbFire").on("change", function () {
    // on change of state
    if (this.checked) {
      // if changed state is "CHECKED"
      $("#txtFire").prop("readonly", false);
    } else {
      $("#txtFire").prop("readonly", true);
      $("#txtFire").val("");
    }
  });




  function LoadOutput() {
    $.ajax({
      url: "/admin/file-format/type",
      type: "get",
      data: {
        is_input: false,
      },
      success: function (data, textStatus, xhr) {
        $("#slOutput").empty();
        data.ffs.forEach((ff) => {
          let opt = '<option value="' + ff._id + '">' + ff.name + "</option>";
          $("#slOutput").append(opt);
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    });
  }

  function LoadSize() {
    $.ajax({
      url: "/admin/size",
      type: "get",
      success: function (data, textStatus, xhr) {
        $("#slSize").empty();
        data.sizes.forEach((size) => {
          let opt =
            '<option value="' + size._id + '">' + size.name + "</option>";
          $("#slSize").append(opt);
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    });
  }

  function LoadColorMode() {
    $.ajax({
      url: "/admin/color-mode",
      type: "get",
      success: function (data, textStatus, xhr) {
        $("#slColorMode").empty();
        data.cms.forEach((cm) => {
          let opt = '<option value="' + cm._id + '">' + cm.name + "</option>";
          $("#slColorMode").append(opt);
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    });
  }

  function LoadCloud() {
    $.ajax({
      url: "/admin/cloud",
      type: "get",
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      success: function (data, textStatus, xhr) {
        $("#slCloud").empty();
        console.log(data);
        data.clouds.forEach((cl) => {
          let opt = '<option value="' + cl._id + '">' + cl.name + "</option>";
          $("#slCloud").append(opt);
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    });
  }

  function LoadNationalStyle() {
    $.ajax({
      url: "/admin/national-style",
      type: "get",
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      success: function (data, textStatus, xhr) {
        $("#slNationalStyle").empty();
        data.nss.forEach((s) => {
          let opt = '<option value="' + s._id + '">' + s.name + "</option>";
          $("#slNationalStyle").append(opt);
        });
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    });
  }
</script>