<div class="row mt-2">
    <div class="col-md-8 col-md-offset-4 text-right">
        <div class="input-group">
            <div class="input-group-btn">
                <select id="slStatus" multiple="multiple form-control">
                    <option value="-10">Wait</option>
                    <option value="1">Editor submited</option>
                    <option value="-1">Initial</option>
                    <option value="0">Editing</option>
                    <option value="2">Q.A submited</option>
                    <option value="3">DC submited</option>
                    <option value="4">Uploaded</option>
                    <option value="-2">Q.A rejected</option>
                    <option value="-3">DC rejected</option>
                    <option value="-5">Canceled</option>
                </select>

            </div><!-- /btn-group -->
            <input type="text" class="form-control" placeholder="Seach your job..." id="txtSearch" />
            <div class="input-group-btn">

                <button class="btn btn-info" type="submit" id="btnSearch">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
                <button class="btn btn-primary" id="btnGetTask">
                    <i class="fa fa-plus" aria-hidden="true"></i>
                    Get task
                </button>
            </div>
        </div>
    </div>
</div>

<div class="table-responsive mt-2">
    <table class="table table-striped text-nowrap">
        <thead class="thead-dark">
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                <th scope="col">Customer</th>
                <th scope="col">Job</th>
                <th scope="col">Level</th>
                <th scope="col" class="text-center">Urgent</th>
                <th scope="col">Deadline</th>
                <th scope="col">Remark</th>
                <th scope="col" class="text-right">E-N</th>
                <th scope="col" class="text-right">E-T</th>
                <th scope="col">Editor</th>
                <th scope="col">DC</th>
                <th scope="col">Status</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody id="tbdTasks">
        </tbody>
    </table>
</div>

<div id="contextMenu" class="dropdown clearfix">
    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu"
        style="display:block;position:static;margin-bottom:5px;" id="funcMenu">
    </ul>
</div>




<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/common.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />

<script>
    var page = 1;
    var search = '';
    var status = 100;
    var customerId = '';
    var levelId = '';
    var taskId = '';
    $(document).ready(function () {
        $('#slStatus').val([-10,-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]).selectpicker('refresh');
        LoadTasks();
        setInterval(function () {
            LoadTasks();
        }, 10000);//run this thang every 10 seconds
    })

    $('#btnGetTask').click(function () {
        $.ajax({
            url: '/qa/task/get-task',
            type: 'put',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            success: function (data) {
                Swal.fire(
                    'Done!',
                    data.msg,
                    'success'
                )
                LoadTasks();
                taskId = data.task._id;
                $('#modalTaskDetail').modal();
                $('#btn-task-info').click();
            },
            error: function (request, status, error) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops...',
                    text: request.responseJSON.msg
                })

            }
        })
    })

    $(document).on('click', '#funcMenu  li', function () {
        let fnc = $(this).attr('id');

        switch (fnc) {
            case 'reject-task':
                $('#modalRejectTask').modal();
                break;
            case 'submit-task':
                Swal.fire({
                    title: 'Are you sure want to submit this task?',
                    text: "You won't be able to revert this!",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/qa/task/submit',
                            type: 'put',
                            headers: {
                                authorization: "Bearer " + localStorage.getItem("accessToken"),
                            },
                            data: {
                                taskId
                            },
                            success: function (data) {
                                $.toast({
                                    heading: 'Successfully',
                                    text: data.msg,
                                    showHideTransition: 'fade',
                                    icon: 'success'
                                });
                                LoadTasks();
                            }, error: function (request, status, error) {
                                Swal.fire(
                                    'Error!',
                                    request.responseJSON.msg,
                                    'error'
                                )
                            }
                        })
                    }
                })

                break;
        }
    });


    $(document).on("click", "button[name='functions']", function (e) {
        var $contextMenu = $("#contextMenu");
        $contextMenu.css({
            display: "block",
            left: e.pageX,
            top: e.pageY
        });

        taskId = $(this).closest('tr').attr('id');

        $.ajax({
            url: '/qa/task/detail',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                taskId
            },
            success: function (data) {
                customerId = data.customer._id;
                levelId = data.task.basic.level._id;

                $('#funcMenu').empty();
                let mn = '';
                switch (data.task.status) {
                    case 1:
                        mn = '<li id="submit-task"><a tabindex="-1" href="#"> <i class="fa fa-paper-plane text-success" aria-hidden="true"></i> Q.A ok</a></li>';
                        mn += '<li id="reject-task"><a tabindex="-1" href="#"> <i class="fa fa-ban text-danger" aria-hidden="true"></i> Reject</a></li>';
                        break;
                    default:
                        $contextMenu.css({
                            display: "none"
                        });
                        break;

                }
                $('#funcMenu').append(mn);
            }
        })


        $('html').click(function () {
            $contextMenu.hide();
        });

    });

    $('#slStatus').on('change', function () {
        status = this.value;
        LoadTasks();
    })



    $('#modalRejectTask').on('hidden.bs.modal', function () {
        LoadTasks();
    })


    $(document).on("click", "button[name='btnTaskInfo']", function () {
        taskId = $(this).closest("tr").attr("id");
        $('#modalTaskDetail').modal();
    })




    function LoadTasks() {
        $.ajax({
            url: '/qa/task/personal',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                page,
                search: $('#txtSearch').val(),
                status: ($("#slStatus").val() || []).join(',')
            },
            success: function (data) {
                $('#tbdTasks').empty();
                let idx = 1;

                data.tasks.forEach(t => {
                    let tr = '<tr id="' + t._id + '" data-job="' + t.basic.level._id + '">';
                    tr += '<td>';
                    tr += '<button class="btn btn-xs btn-warning ml-2" name="functions"><i class="fa fa-cog" aria-hidden="true"></i></button>';
                    tr += '</td>';
                    tr += '<td>' + (idx++) + '</td>';

                    tr += '<td class="font-weight-bold text-info">' + (getFirstLetters(t.basic.job.customer.name.firstname + ' ' + t.basic.job.customer.name.lastname)).toUpperCase() + getLastLetters(t.basic.job.customer._id) + '</td>';
                    tr += '<td class="font-weight-bold text-danger">' + t.basic.job.name + '</td>';
                    tr += '<td class="font-weight-bold">';
                    tr += t.basic.level.name

                    let chk = (t.basic.job.cc.filter(x => x.tasks.includes(t._id))).length > 0 ? true : false;
                    if (chk) {
                        tr += '<i class="fa fa-cc text-danger ml-2" aria-hidden="true"></i>'
                    }
                    if (t.status === -10) {
                        tr += '<i class="fa fa-pause text-danger ml-2" aria-hidden="true"></i>'
                    }
                    tr += '</td>';
                    tr += '<td class="text-center">';
                    if (t.basic.job.urgent) {
                        tr += '<i class="text-danger fa fa-exclamation-triangle" aria-hidden="true"></i>'
                    }
                    tr += '</td>';

                    tr += '<td ';
                    let dl = GetDifferenceBetweenTwoDatesToHours(t.basic.deadline.end)
                    if (dl <= 6 && dl > 4) {
                        tr += 'style="background-color:rgba(245,0,0,0.1); color:white; font-weight: bold;"'
                    }
                    if (dl <= 4 && dl > 2) {
                        tr += 'style="background-color:rgba(245,0,0,0.4); color:white; font-weight: bold;"'
                    }
                    if (dl <= 2) {
                        tr += 'style="background-color:rgba(245,0,0,0.6); color:white; font-weight: bold;"'
                    }

                    tr += '>' + convertISODateToTimeFormat(t.basic.deadline.end) + '</td>';

                    tr += '<td>';
                        if(t.status === -5){
                            tr+='[<span class="text-danger font-weight-bold">'+t.canceled.reason.name+'</span>] - '
                        }
                    tr += t.remarks[t.remarks.length - 1].content;

                    tr += '</td>';

                    tr += '<td class="text-right">';
                    if (t.editor.length > 0 && t.editor[t.editor.length - 1].submited.length > 0) {
                        tr += t.editor[t.editor.length - 1].submited[t.editor[t.editor.length - 1].submited.length - 1].amount;
                    }
                    tr += '</td>';

                    tr += '<td class="text-right">';
                    if (t.editor.length > 0 && t.editor[t.editor.length - 1].submited.length > 0) {
                        tr += t.editor[t.editor.length - 1].submited.length;
                    }
                    tr += '</td>';


                    tr += '<td>';

                    if (t.status !== -1) {
                        tr += t.editor[t.editor.length - 1].staff.username;
                    }
                    tr += '</td>';

                    tr += '<td>';
                    if (t.dc.length > 0 && !t.dc[t.dc.length - 1].unregisted) {
                        tr += t.dc[t.dc.length - 1].staff.username;
                    }
                    tr += '</td>';


                    tr += '<td><i>';

                    switch (t.status) {
                        case -10: tr += '<span class="text-danger font-weight-bold">Wait</span>'; break;
                        case -1: tr += '<span class="text-info">Initial</span>'; break;
                        case 0: tr += '<span class="text-info">Processing</span>'; break;
                        case 1:
                            {
                                if (t.editor[t.editor.length - 1].submited.length > 1) {
                                    tr += '<span class="text-primary">Fixed</span>';
                                } else {
                                    tr += '<span class="text-primary">Edited</span>';
                                }
                                break;
                            }
                        case 2: tr += '<span class="text-success">Q.A ok!</span>'; break;
                        case 3: tr += '<span class="text-success">DC ok!</span>'; break;
                        case 4: tr += '<span class="text-info font-weight-bold">Uploaded</span>'; break;
                        case 5: tr += '<span class="text-success font-weight-bold">Done</span>'; break;
                        case 6: tr += '<span class="text-success font-weight-bold">Finish</span>'; break;
                        case -2: tr += '<span class="text-danger">Q.A rejected</span>'; break;
                        case -3: tr += '<span class="text-danger">DC rejected</span>'; break;
                        case -4: tr += '<span class="text-danger">Sale rejected</span>'; break;
                        case -5: tr += '<span class="text-danger">Canceled</span>'; break;
                        case -6: tr += '<span class="text-danger font-weight-bold">Customer CC</span>'; break;
                    }
                    tr += '</i></td>';




                    tr += '<td class="text-right">';
                    tr += '<button class="btn btn-xs btn-info" name="btnTaskInfo">';
                    tr += '<i class="fa fa-info-circle" aria-hidden="true"></i>';
                    tr += '</button>';
                    tr += '</td>';


                    tr += '</tr>';
                    $('#tbdTasks').append(tr);
                })
            }

        })
    }
</script>

<style>
    #contextMenu {
        position: absolute;
        display: none;
    }

    tr:hover {
        background: #c9e8f7;
        position: relative;
    }
</style>

<%-include('task_detail')%>
    <%-include('reject-modal')%>