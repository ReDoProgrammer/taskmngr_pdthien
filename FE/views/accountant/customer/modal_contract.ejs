<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/common.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />

<div id="modalContract" class="modal fade" role="dialog">
  <div class="modal-dialog">
    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Customer contract</h4>
      </div>
      <div class="modal-body">
        <div class="col-md-10">
          <select name="" id="slCustomerLevels" class="form-control selectpicker" data-live-search="true"></select>
        </div>
        <div class="input-group col-md-2">
          <input type="text" class="form-control text-right" id="txtLevelPrice" value="0">
          <div class="input-group-btn">
            <button class="btn btn-primary" id="btnAddNewLine">
              <i class="fa fa-plus" aria-hidden="true"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>#</th>
              <th>Level</th>
              <th>Price</th>
              <th></th>
            </tr>
          </thead>
          <tbody id="tblConrtactLines">
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function () {
    LoadCustomerLevels();
  })
  $(document).on('show.bs.modal', '#modalContract', function () {
    LoadContractLines();
  })

  $(document).on('click', 'button[name="delete-contract-line"]', function () {    
    Swal.fire({
      icon: 'question',
      title: 'Do you want to delete this contract line?',
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonText: 'Yes',
      denyButtonText: `No`,
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: '/accountant/customer/delete-contract-line',
          type: 'delete',
          headers: {
            authorization: "Bearer " + localStorage.getItem('accessToken'),
          },
          data: {
            customerId,
            lineId:$(this).closest("tr").attr("id")
          },
          success: function (data) {
            $.toast({
              heading: 'Successfully!',
              text: data.msg,
              showHideTransition: 'fade',
              icon: 'success'
            });
            LoadContractLines();
          }
          , error: function (err) {
            $.toast({
              heading: 'Error',
              text: err.responseJSON.msg,
              showHideTransition: 'fade',
              icon: 'error'
            });
          }
        })
      }
    })
  })

  $(document).on('focusout', 'input[name="contract-price"]', function () {
    let price = parseFloat($(this).val());
    let lineId = $(this).closest("tr").attr("id");
    $.ajax({
      url: '/accountant/customer/update-contract-line',
      type: 'put',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { customerId, lineId, price },
      success: function (data) {
        $.toast({
          heading: 'Successfully!',
          text: data.msg,
          showHideTransition: 'fade',
          icon: 'success'
        });
        LoadContractLines();
      },
      error: function (err) {
        $.toast({
          heading: 'Error',
          text: err.responseJSON.msg,
          showHideTransition: 'fade',
          icon: 'error'
        });
      }
    })
  })


  function LoadContractLines() {
    $('#tblConrtactLines').empty();
    $.ajax({
      url: '/accountant/customer/contracts',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { customerId },
      success: function (data) {
        let idx = 1;
        data.contracts.forEach(c => {
          let levels = c.mapping.levels.map(x => x.name);

          let tr = '<tr id="' + c._id + '">';
          tr += '<td class="col-md-1">' + (idx++) + '</td>';
          tr += '<td class="text-danger font-weight-bold col-md-7 text-left">' + c.mapping.name + ' <span class="text-info">[' + levels + ']</span></td>';
          tr += '<td class="col-md-2"><input text="text" name="contract-price" class="text-right form-control" value="' + c.price + '"/></td>';
          tr += '<td class="col-md-2">';
          tr += '<button class="btn btn-xs btn-danger mt-1" name="delete-contract-line"><i class="fa fa-trash" aria-hidden="true"></i></button>';
          tr += '</td>';
          tr += '</tr>';
          $('#tblConrtactLines').append(tr);

        })
      }
    })
  }

  $('#btnAddNewLine').click(function () {
    let lineId = $('#slCustomerLevels option:selected').val();
    let price = parseFloat($('#txtLevelPrice').val());
    if (isNaN(price) || price <=0) {
      $.toast({
        heading: 'Error',
        text: `Price is invalid!`,
        showHideTransition: 'fade',
        icon: 'error'
      });
      return;
    }
    $.ajax({
      url: '/accountant/customer/insert-contract-line',
      type: 'put',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { customerId, levelId, price },
      success: function (data) {
        $.toast({
          heading: 'Successfully!',
          text: data.msg,
          showHideTransition: 'fade',
          icon: 'success'
        });
        LoadContractLines();
      },
      error: function (err) {
        $.toast({
          heading: 'Error',
          text: err.responseJSON.msg,
          showHideTransition: 'fade',
          icon: 'error'
        });
      }
    })

  })

  function LoadCustomerLevels() {
    $.ajax({
      url: '/accountant/mapping',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      success: function (data) {
        $('#slCustomerLevels').empty();
        data.maps.forEach(m => {
          if (m.levels.length > 0) {
            let levels = m.levels.map(x => x.name);
            let opt = '<option value="' + m._id + '">' + m.name + ' [' + levels + ']</option>';
            $('#slCustomerLevels').append(opt)
          }

        })
        $('#slCustomerLevels').selectpicker();
        $('#slCustomerLevels').selectpicker('refresh');
      }
    })
  }
</script>