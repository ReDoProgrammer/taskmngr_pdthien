<script src="/js/common.js"></script>
<script type='text/javascript'
  src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>

<script src="/js/bootstrap-select.min.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />


<div class="modal" tabindex="-1" role="dialog" id="updateJobModal">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-body">
        <div class="panel panel-primary text-white bg-dark">
          <div class="panel-heading text-info font-weight-bold">Update job info</div>
          <div class="panel-body">
            <div class="row form-group">
              <div class="col-sm-4">Customer:</div>
              <div class="col-sm-8 font-weight-bold text-info" id="lblCustomerFullname"></div>
            </div>
            <div class="row form-group">
              <div class="col-sm-4">Phone:</div>
              <div class="col-sm-8" id="lblCustomerPhone"></div>
            </div>
            <div class="row form-group">
              <div class="col-sm-4">Email:</div>
              <div class="col-sm-8" id="lblCustomerEmail"></div>
            </div>

            <hr>
            <div class="form-group">
              <label for="">Job name:</label>
              <input type="text" name="" id="txtName" class="form-control" placeholder="Job name">
            </div>

            <div class="form-group">
              <label for="">Link source:</label>
              <input type="text" name="" id="txtLinkSource" class="form-control" placeholder="Images link">
            </div>


            <div class="row">
              <div class="col-sm-6">
                <div class=" form-group">
                  <label for="">Received Date<span class="text-danger font-weight-bold">(*)</span> :</label>
                  <input type="text" class="inputDate form-control" id="txtReceivedDate">
                </div>
              </div>
              <div class="col-sm-6">
                <div class="form-group">
                  <label for="">Delivery Date<span class="text-danger font-weight-bold">(*)</span> :</label>
                  <input type="text" class="inputDate form-control" id="txtDeliveryDate">
                </div>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-12 form-group">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" value="" id="ckbChooseCombo">
                  <label class="form-check-label" for="ckbChooseCombo">
                    Choose Combo
                  </label>
                </div>
              </div>
            </div>
            <div class="row" id="divCombo">
              <div class="col-sm-12">
                <select name="" id="slComboes" class="form-control"></select>
              </div>
            </div>

            <div class="form-group">
              <label for="">Template</label>
              <select id="slTemplates" class="selectpicker form-control" multiple
                title="Choose one of the following..."></select>
            </div>


            <div class="row">
              <div class="col-sm-12 form-group">
                <label for="">Intruction:</label>
                <textarea name="" id="txaIntruction" rows="2" class="form-control"></textarea>
              </div>
            </div>
            <div class="row">
              <div class="col-md-12 form-group">
                <div class="checkbox">
                  <label><input type="checkbox" id="ckbMaterial">Material</label>
                </div>
              </div>
            </div>

            <div class="row" id="rMaterial" hidden>
              <div class="col-md-5 form-group">
                <label for="">Material type:</label>
                <select name="" id="slMaterials" class="form-control"></select>
              </div>
              <div class="col-md-5 form-group">
                <label for="">Captureder</label>
                <select name="" id="slCaptureders" class="form-control selectpicker" data-live-search="true"></select>
              </div>
              <div class="col-md-2 form-group">
                <label for="">Quantity:</label>
                <input type="text" value="0" id="txtCapturedQuantity" class="form-control">
              </div>
            </div>

            <div class="row">
              <div class="col-md-12 col-sm-12 col-xs12">
                <label for="" class="text-danger" id="lblError"></label>
              </div>
            </div>



            <div class="form-group text-right">
              <button type="button" class="btn btn-sm btn-primary" id="btnUpdateJob">Submit changes</button>
              <button type="button" class="btn btn-sm btn-secondary" data-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



<script>
  $(document).ready(function () {
    LoadCaptureders();
    LoadMaterials();
  })



  $("#ckbChooseCombo").change(function () {
    if (this.checked) {
      $('#divCombo').slideDown(600);
    } else {
      $('#divCombo').slideUp(600);
    }
  });

  $("#updateJobModal").on('shown.bs.modal', function (e) {
    LoadComboes();
    LoadTemplates();
    LoadJobToEdit();
  })

  function LoadJobToEdit() {

    $.ajax({
      url: '/sale/job/detail',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        jobId
      },
      success: function (data) {

        let templates = data.job.templates.map(x => {
          return x.root ? x.root : x.parents
        })
        $('#slTemplates').val(templates).trigger('change');
        $('#slTemplates').selectpicker('refresh')

        $('#lblCustomerFullname').text(data.job.customer.name.firstname + ' ' + data.job.customer.name.lastname);
        $('#lblCustomerPhone').text(data.job.customer.contact.phone);
        $('#lblCustomerEmail').text(data.job.customer.contact.email);
        $('#txtName').val(data.job.name);
        $('#txtLinkSource').val(data.job.link.input);
        $('#txtReceivedDate').val(convertISODateToTimeFormat(data.job.deadline.begin));
        $('#txtDeliveryDate').val(convertISODateToTimeFormat(data.job.deadline.end));
        $('#txaIntruction').val(data.job.intruction);

        if (data.job.cb) {
          $('#ckbChooseCombo').prop('checked', true);
          $('#divCombo').slideDown();
          $('#slCombo').val(data.job.cb)

        } else {
          $('#ckbChooseCombo').prop('checked', false);
          $('#divCombo').slideUp();
        }

        if (data.job.captured && data.job.captured.user) {
          $('#ckbMaterial').prop('checked', true);
          $('#rMaterial').slideDown();
          $('#slMaterials').val(data.job.captured.material);
          $('#slCaptureders').val(data.job.captured.user);
          $('#slCaptureders').selectpicker('refresh');
          $('#txtCapturedQuantity').val(data.job.captured.quantity)
        } else {
          $('#ckbMaterial').prop('checked', false);
          $('#rMaterial').slideUp();
        }
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert(jqXHR.responseJSON.msg);
      },
    })
  }

  function LoadTemplates() {
    $.ajax({
      url: '/sale/customer/list-templates',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { customerId },
      success: function (data) {
        $('#slTemplates').empty();
        data.templates.forEach(temp => {
          let name = temp.root ? temp.root.name : temp.parents.name;
          $('#slTemplates').append('<option value="' + (temp.root ? temp.root._id : temp.parents._id) + '">' + name + '</option>')
        })
        $('#slTemplates').selectpicker();
        $('#slTemplates').selectpicker('refresh');

      }
    })
  }



  $('#btnUpdateJob').click(function () {
    let name = $('#txtName').val();
    let input_link = $('#txtLinkSource').val();
    let received_date = strToDate($('#txtReceivedDate').val());
    let delivery_date = strToDate($('#txtDeliveryDate').val());
    let intruction = $('#txaIntruction').val();
    let cb = $("#ckbChooseCombo").is(':checked') ? $('#slComboes option:selected').val() : null;
    let material = $('#ckbMaterial').is(':checked') ? $('#slMaterials option:selected').val() : null;
    let captureder = $('#ckbMaterial').is(':checked') ? $('#slCaptureders option:selected').val() : null;
    let quantity = $('#ckbMaterial').is(':checked') ? $('#txtCapturedQuantity').val() : 0;
    var templates = ($("#slTemplates").val() || []).join(', ');

    if(name.trim().length === 0){
      $('#lblError').text('(*) Job name can not be blank!');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }
    
    if (isNaN(delivery_date) || delivery_date === null || isNaN(received_date) || received_date == null) {
      $('#lblError').text('(*) Received date or delivery date is  invalid!');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }


    if (delivery_date < new Date($.now())) {
      $('#lblError').text('(*) delivery date can not smaller than current time!');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }

    if (delivery_date <= received_date) {
      $('#lblError').text('(*) delivery date must be greater than received date!');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }

    if ($("#ckbChooseCombo").is(':checked') && (typeof cb === 'undefined' || cb === null)) {
      $('#lblError').text('(*) Please set combo when it has choosen to continue');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }

    if ($('#ckbMaterial').is(':checked') && (typeof material === 'undefined' || material === null)) {
      $('#lblError').text('(*) Please set material when it has choosen to continue');
      $('#lblError').show().delay(3000).fadeOut();
      return;
    }



    $.ajax({
      url: '/sale/job',
      type: 'put',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { jobId, name, input_link, received_date, delivery_date, intruction, cb, material, captureder, quantity, templates },
      success: function (data) {
        Swal.fire({
          icon: 'success',
          title: 'Successfully!',
          text: data.msg
        })
        $('#updateJobModal').modal('hide');
        LoadJobs();
      },
      error: function (jqXHR, textStatus, errorThrown) {
        Swal.fire({
          icon: 'error',
          title: 'Opp.....!',
          text: jqXHR.responseJSON.msg
        })
      }
    })

  })
  function LoadComboes() {
    $.ajax({
      url: '/sale/combo',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { customerId },
      success: function (data) {
        if (data.comboes.length > 0) {
          $('#rowCombo').slideDown(500);
          $('#slComboes').empty();
          data.comboes.forEach(c => {
            let levels = (c.lines.map(x => (x.root ? x.root.name : x.parents.name) + ': ' + x.quantity)).toString();

            let opt = '<option value="' + c._id + '">' + c.name + ' [ ' + levels + ' ]</option>';
            $('#slComboes').append(opt);
          })
        }

      }
    })
  }

  function LoadMaterials() {
    $.ajax({
      url: '/sale/material',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      success: function (data) {
        $('#slMaterials').empty();
        data.materials.forEach(m => {
          $('#slMaterials').append('<option value = "' + m._id + '">' + m.name + '</option>');
        })
      }
    })
  }

  function LoadCaptureders() {
    $.ajax({
      url: '/sale/user',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      success: function (data) {
        $('#slCaptureders').empty();
        data.captureders.forEach(u => {
          $('#slCaptureders').append('<option value="' + u._id + '">' + u.fullname + ' (' + u.username + ') </option>');
        })
        $('#slCaptureders').selectpicker();
        $('#slCaptureders').selectpicker('refresh');
      }
    })
  }



  $("#ckbMaterial").change(function () {
    if (this.checked) {
      $('#rMaterial').slideDown(600);
      $('#txtCapturedQuantity').val('0');
    } else {
      $('#rMaterial').slideUp(600);
    }
  });

  $('#txtDuration').keyup(function (e) {
    if (/\D/g.test(this.value)) {
      // Filter non-digits from input value.
      this.value = this.value.replace(/\D/g, '');
    }
    let duration = parseInt($('#txtDuration').val());
    let assigned_date = strToDate($('#txtReceivedDate').val());
    let deadline = assigned_date.addHours(duration);
    $('#txtDeliveryDate').val(convertISODateToTimeFormat(deadline));
  });

  $('.inputDate').inputmask("datetime", {
    mask: "1/2/y h:s",
    placeholder: "dd/mm/yyyy hh:mm",
    leapday: "-02-29",
    separator: "/",
    alias: "dd/mm/yyyy hh:mm"
  })
  
  
  $('#txtCapturedQuantity').focusout(function() {
    if(($('#txtCapturedQuantity').val()).trim().length == 0){
      console.log(0)
    } 
   
  })
</script>