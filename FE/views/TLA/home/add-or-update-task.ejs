<div class="panel panel-primary" id="divAddOrUpdateTask">
    <div class="panel-heading font-w">
        <div class="row">
            <div class="col-md-11 col-sm-11 col-xs-11">
                Add or update task
            </div>
            <div class="col-md-1 col-sm-1 col-xs-1 text-right">
                <button class="btn btn-xs btn-danger btnCancel">
                    <i class="fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="panel-body">

        <div class="row">
            <div class="col-md-6 col-sm-12 col-xs-12">
                <div class="form-group">
                    <label for="">Job level</label>
                    <select name="" id="slJobLevels" class="form-control"></select>
                </div>

            </div>
            <div class="col-md-3 col-sm-6 col-xs-6">
                <div class="form-group">
                    <label for="">Assign Date<span class="text-danger font-weight-bold">(*)</span>: </label>
                    <input type="text" class="inputDate form-control" id="txtAssignDate">
                </div>
            </div>

            <div class="col-md-3 col-sm-6 col-xs-6">
                <div class=" form-group">
                    <label for="">Deadline<span class="text-danger font-weight-bold">(*)</span>:</label>
                    <input type="text" class="inputDate form-control" id="txtDeadline">
                </div>
            </div>
        </div>

        <div class="row mt-2">
            <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Images Link:</label>
                <input type="text" class="form-control" id="txtInputLink">
            </div>
        </div>

        <div class="row mt-2">
            <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Remark:</label>
                <input type="text" name="txtRemark" id="txtRemark" class="form-control" placeholder="Task remark">
            </div>
        </div>

        <hr />
        <div class="row">
            <div class="col-xs-6">
                <div class="form-check mt-1">
                    <input class="form-check-input" type="checkbox" value="" id="ckbAssignEditor" />
                    <label class="form-check-label" for="defaultCheck1">
                        Assign Editor
                    </label>
                </div>
            </div>
            <div class="col-xs-6">
                <div class="form-check mt-1">
                    <input class="form-check-input" type="checkbox" value="" id="ckbAssignQA" />
                    <label class="form-check-label" for="defaultCheck1">
                        Assign Q.A
                    </label>
                </div>
            </div>
        </div>
        
        <div class="row mt-2">    
            <%-include('child/editor')%>
            <%-include('child/qa')%>
        </div>

        <div class="row mt-2">
            <div class="col-md-12">
                <label for="" class="font-weight-bold text-danger" id="lblError"></label>
            </div>
        </div>

        <div class="row mt-2">
            <div class="col-md-12 col-sm-12 col-xs-12 text-center">
                <button class="btn btn-success" id="btnSubmit">
                    <i class="fa fa-floppy-o" aria-hidden="true"></i> Submit changes
                </button>
            </div>
        </div>


    </div>

</div>

<script>
    $("#ckbAssignEditor").change(function () {
        if (this.checked) {
            $('#colEditor').slideDown(500);
        } else {
            $('#colEditor').slideUp(500);
        }
    });
    $("#ckbAssignQA").change(function () {
        if (this.checked) {
            $('#colQA').slideDown(500);
        } else {
            $('#colQA').slideUp(500);
        }
    });

    $("#btnSubmit").click(function () {
        let level = $("#slJobLevels option:selected").val();
        let name = $("#slJobLevels option:selected").text();

        let assigned_date = strToDate($('#txtAssignDate').val());
        let deadline = strToDate($('#txtDeadline').val());
        let input_link = $('#txtInputLink').val();
        let remark = $('#txtRemark').val();

        let editor_assigned = $("#ckbAssignEditor").is(':checked')?true:false;
        let qa_assigned = $("#ckbAssignQA").is(':checked')?true:false;
        let editor = $('#slEditor option:selected').val();
        let qa = $('#slQA option:selected').val();

        if (editor_assigned && typeof editor === 'undefined') {
            $('#msgError').text('(*) No editor is assigned!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        if (qa_assigned && typeof qa === 'undefined') {
            $('#msgError').text('(*) No Q.A is assigned!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        // validateion component inputs

        if (isNaN(assigned_date) || assigned_date === null || isNaN(deadline) || deadline == null) {
            $('#msgError').text('(*) Assign date or deadline is invalid!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }


        if (deadline < new Date($.now())) {
            $('#msgError').text('(*) deadline must be later than current time!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        if (deadline <= assigned_date) {
            $('#msgError').text('(*) deadline must be greater than assign date!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        if (taskId.trim().length == 0) {
            $.ajax({
                url: '/tla/task',
                type: 'post',
                headers: {
                    authorization: "Bearer " + localStorage.getItem("accessToken"),
                },
                data: {
                    job: jobId,
                    level,
                    assigned_date,
                    deadline,
                    input_link,
                    remark,
                    qa_assigned,
                    editor_assigned,
                    qa,
                    editor
                },
                success: function (data) {
                    alert(data.msg);
                    LoadTasks();                    
                    LoadJob();                  
                    $('#divAddOrUpdateTask').slideUp(500);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
                    $('#msgError').show().delay(3000).fadeOut();
                },
            })
        } else {
            $.ajax({
                url: '/tla/task',
                type: 'put',
                headers: {
                    authorization: "Bearer " + localStorage.getItem("accessToken"),
                },
                data: {
                    taskId,                   
                    assigned_date,
                    deadline,
                    input_link,
                    remark,
                    qa_assigned,
                    editor_assigned,
                    qa,
                    editor
                },
                success: function (data) {
                    alert(data.msg);
                    LoadTasks();                  
                    LoadJob();
                    $('#txtInputLink').val('');
                    $('#divAddOrUpdateTask').slideUp(500);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
                    $('#msgError').show().delay(3000).fadeOut();
                },
            })
        }      

    });




    $("#slJobLevels").change(function () {
        let levelId =  $("#slJobLevels option:selected").val();
        LoadEditor(levelId);
        LoadQA(levelId);
    });

    function LoadJobLevels() {

        $.ajax({
            url: '/tla/job-level',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                customerId
            },

            success: function (data) {
                console.log(data);
                $('#slJobLevels').empty();
                data.jl.forEach(j => {
                    let opt = '<option value="' + j._id + '" class="font-weight-bold text-danger">' + j.name + '</option>';
                    $('#slJobLevels').append(opt);
                })
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#msgError').text(jqXHR.responseJSON.msg);
            },
        })
    }


   
</script>