<div class="modal" tabindex="-1" id="editTaskModal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-body text-dark">
                <div class="panel panel-info mb-3">
                    <div class="panel-heading font-weight-bold">
                        <i class="fa fa-tasks" aria-hidden="true"></i>
                        <label id="name_case" class="text-uppercase"></label> - <label id="customer"
                            class="text-danger"></label>
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-4 col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <label for="">Job level</label>
                                    <select name="" id="slJobLevels" class="form-control"></select>
                                </div>

                            </div>
                            <div class="col-md-3 col-sm-6 col-xs-6">
                                <div class="form-group">
                                    <label for="">Assign Date<span class="text-danger font-weight-bold">(*)</span>:
                                    </label>
                                    <input type="text" class="inputDate form-control" id="txtAssignDate">
                                </div>
                            </div>
                            <div class="col-md-2 col-sm-2 col-xs-2">
                                <div class="form-group">
                                  <label for="">Hours:</label>
                                  <input type="text" class="form-control text-right" id="txtDuration" value="0">
                                </div>
                              </div>

                            <div class="col-md-3 col-sm-6 col-xs-6">
                                <div class=" form-group">
                                    <label for="">Deadline<span class="text-danger font-weight-bold">(*)</span>:</label>
                                    <input type="text" class="inputDate form-control" id="txtDeadline">
                                </div>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="form-group col-md-12 col-sm-12 col-xs-12">
                                <label for="">Images Link:</label>
                                <input type="text" class="form-control" id="txtInputLink">
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="form-group col-md-12 col-sm-12 col-xs-12">
                                <label for="">Remark:</label>
                                <input type="text" name="txtRemark" id="txtRemark" class="form-control"
                                    placeholder="Task remark">
                            </div>
                        </div>

                        <hr />
                        <div class="row">
                            <div class="col-xs-6">
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="checkbox" value="" id="ckbAssignEditor" />
                                    <label class="form-check-label" for="defaultCheck1">
                                        Assign Editor
                                    </label>
                                </div>
                            </div>
                            <div class="col-xs-6">
                                <div class="form-check mt-1">
                                    <input class="form-check-input" type="checkbox" value="" id="ckbAssignQA" />
                                    <label class="form-check-label" for="defaultCheck1">
                                        Assign Q.A
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                                <div id="colEditor">
                                    <select name="" id="slEditor" class="form-control"></select>
                                </div>
                            </div>
                            <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                                <div id="colQA">
                                    <select name="" id="slQA" class="form-control"></select>
                                </div>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="col-md-12">
                                <label for="" class="font-weight-bold text-danger" id="lblError"></label>
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="col-md-12 col-sm-12 col-xs-12 text-center">
                                <button class="btn btn-success" id="btnSubmit">
                                    <i class="fa fa-floppy-o" aria-hidden="true"></i> Submit changes
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/common.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />

<script type='text/javascript'
    src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>
<script>
    $("#editTaskModal").on('shown.bs.modal', function (e) {
        LoadJobLevels();
        LoadTask();       
        $('#colEditor').hide();
        $('#colQA').hide();

    })


    $("#btnSubmit").click(function () {
        let level = $("#slJobLevels option:selected").val();
        let name = $("#slJobLevels option:selected").text();

        let assigned_date = strToDate($('#txtAssignDate').val());
        let deadline = strToDate($('#txtDeadline').val());
        let input_link = $('#txtInputLink').val();
        let remark = $('#txtRemark').val();

        let editor_assigned = $("#ckbAssignEditor").is(':checked') ? true : false;
        let qa_assigned = $("#ckbAssignQA").is(':checked') ? true : false;
        let editor = $('#slEditor option:selected').val();
        let qa = $('#slQA option:selected').val();

        if (editor_assigned && typeof editor === 'undefined') {
            $('#msgError').text('(*) No editor is assigned!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        if (qa_assigned && typeof qa === 'undefined') {
            $('#msgError').text('(*) No Q.A is assigned!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        // validateion component inputs

        if (isNaN(assigned_date) || assigned_date === null || isNaN(deadline) || deadline == null) {
            $('#msgError').text('(*) Assign date or deadline is invalid!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }


        if (deadline < new Date($.now())) {
            $('#msgError').text('(*) deadline must be later than current time!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }

        if (deadline <= assigned_date) {
            $('#msgError').text('(*) deadline must be greater than assign date!');
            $('#msgError').show().delay(3000).fadeOut();
            return;
        }


        $.ajax({
            url: '/tla/task',
            type: 'put',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                taskId,
                assigned_date,
                deadline,
                input_link,
                remark,
                qa_assigned,
                editor_assigned,
                qa,
                editor
            },
            success: function (data) {
                alert(data.msg);
                LoadTasksList();             
                $('#editTaskModal').modal('hide');
                
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
                $('#msgError').show().delay(3000).fadeOut();
            },
        })


    });

    function LoadTask() {
        $.ajax({
            url: '/tla/task/detail',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                taskId
            },
            success: function (data) {
                levelId = data.task.basic.level._id;               
                LoadEditors();
                LoadQAs();

                console.log(data.task);
                $('#name_case').text(data.task.basic.job.name);
                $('#customer').text(data.customer.firstname+' '+data.customer.lastname);

                $('#slJobLevels').val(data.task.basic.level._id);
                $('#slJobLevels').attr("disabled", true);
                $('#txtAssignDate').val(convertISODateToTimeFormat(data.task.basic.deadline.begin));
                $('#txtAssignDate').prop('readonly', true);
                if(data.task.basic.deadline.end){
                    $('#txtDeadline').val(convertISODateToTimeFormat(data.task.basic.deadline.end));
                }
               
                $('#txtInputLink').val(data.task.basic.link.input);
                $('#txtRemark').val(data.task.remarks[0].content);

                //xu ly checkbox va dropdown lien quan toi editor va qa
               
                $('#ckbAssignEditor').prop('checked', data.task.editor.length>0?true:false);
                $('#ckbAssignQA').prop('checked', data.task.qa.length>0?true:false);

                if (data.task.editor.length>0) {
                    $('#colEditor').show();
                    $('#slEditor').val(data.task.editor[data.task.editor.length-1].staff._id);
                    if (data.task.status > 0) {
                        $('#ckbAssignEditor').attr("disabled", true);
                        $('#slEditor').attr("disabled", true);
                    } else {
                        $('#ckbAssignEditor').attr("disabled", false);
                        $('#slEditor').attr("disabled", false);
                    }
                } else {
                    $('#colEditor').hide();
                }

                if (data.task.qa.length>0) {
                    $('#colQA').show();
                    $('#slQA').val(data.task.qa[data.task.qa.length-1].staff._id);
                    if (data.task.status > 1) {
                        $('#ckbAssignQA').attr("disabled", true);
                        $('#slQA').attr("disabled", true);
                    } else {
                        $('#ckbAssignQA').attr("disabled", false);
                        $('#slQA').attr("disabled", false);
                    }
                } else {
                    $('#colQA').hide();
                }
            }
        })
    }



    $("#ckbAssignEditor").change(function () {
        if (this.checked) {
            $('#colEditor').slideDown(500);
        } else {
            $('#colEditor').slideUp(500);
        }
    });
    $("#ckbAssignQA").change(function () {
        if (this.checked) {
            $('#colQA').slideDown(500);
        } else {
            $('#colQA').slideUp(500);
        }
    });

   



    $("#slJobLevels").change(function () {
        let levelId = $("#slJobLevels option:selected").val();
        LoadEditors();
        LoadQAs();
    });

    function LoadJobLevels() {

        $.ajax({
            url: '/tla/job-level',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                customerId
            },

            success: function (data) {
                $('#slJobLevels').empty();
                data.jl.forEach(j => {
                    let opt = '<option value="' + j._id + '" class="font-weight-bold text-danger">' + j.name + '</option>';
                    $('#slJobLevels').append(opt);
                })                
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#msgError').text(jqXHR.responseJSON.msg);
            },
        })
    }

    function LoadEditors() {
        console.log('levelid: ',levelId);
        $.ajax({
            url: '/tla/user/list-editor',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                levelId
            },
            success: function (data) {
                $('#slEditor').empty();
                $('#slEditorInEditDiv').empty();
                data.editors.forEach(e => {
                    let opt = '<option value="' + e._id + '">' + e.fullname + '</option>';
                    $('#slEditor').append(opt);
                    $('#slEditorInEditDiv').append(opt);
                })
                $('#slEditor').selectpicker();
                $('#slEditorInEditDiv').selectpicker();
                $('#slEditor').selectpicker('refresh');
                $('#slEditorInEditDiv').selectpicker('refresh');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#msgError').text(jqXHR.responseJSON.msg);
            },
        })
    }


    function LoadQAs() {
        $.ajax({
            url: '/tla/user/list-qa',
            type: 'get',
            headers: {
                authorization: "Bearer " + localStorage.getItem("accessToken"),
            },
            data: {
                levelId
            },
            success: function (data) {
                $('#slQA').empty();
                $('#slQAInEditDiv').empty();
                data.qas.forEach(q => {
                    let opt = '<option value="' + q._id + '">' + q.fullname + '</option>';
                    $('#slQA').append(opt);
                    $('#slQAInEditDiv').append(opt);
                })
                $('#slQA').selectpicker();
                $('#slQAInEditDiv').selectpicker();
                $('#slQA').selectpicker('refresh');
                $('#slQAInEditDiv').selectpicker('refresh');
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#msgError').text(jqXHR.responseJSON.msg);
            },
        })
    }

    $('#txtDuration').keyup(function (e) {
        console.log(111111111111);
    if (/\D/g.test(this.value)) {
      // Filter non-digits from input value.
      this.value = this.value.replace(/\D/g, '');
    }
    let duration = parseInt($('#txtDuration').val());
    let assigned_date = strToDate($('#txtAssignDate').val());
    let deadline = assigned_date.addHours(duration);
    $('#txtDeadline').val(convertISODateToTimeFormat(deadline));
  });


    $('.inputDate').inputmask("datetime", {
        mask: "1/2/y h:s",
        placeholder: "dd/mm/yyyy hh:mm",
        leapday: "-02-29",
        separator: "/",
        alias: "dd/mm/yyyy hh:mm"
    })

</script>