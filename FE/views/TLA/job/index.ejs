<div class="row">

    <div class="col-md-4 form-inline">
        <div class="form-group">
            <label>From date:</label>
            <input type="text" class="inputDate form-control" id="txtFromDate">
        </div>
    </div>

    <div class="col-md-4 form-inline">
        <div class="form-group">
            <label>To date:</label>
            <input type="text" class="inputDate form-control" id="txtToDate">
        </div>
    </div>


    <div class="col-md-4 text-right">
        <div class="input-group">
            <div class="input-group-btn">
                <select id="slJobStatus" multiple="multiple form-control">
                    <option value="-1">Open</option>
                    <option value="-2">Canceled</option>
                    <option value="0">Processing</option>
                    <option value="1">Uploaded</option>
                    <option value="2">Done</option>
                    <option value="3">Finished</option>
                </select>

            </div><!-- /btn-group -->
            <input type="text" class="form-control" placeholder="Seach job..." id="txtSearch" />
            <div class="input-group-btn">

                <button class="btn btn-info" type="submit" id="btnSearch">
                    <i class="fa fa-search" aria-hidden="true"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="tableFixHead table-responsive mt-2">
    <table class="table mt-1 table-striped bg-white text-dark text-nowrap">
        <thead class="thead-dark">
            <tr>
                <th scope="col"></th>
                <th scope="col">#</th>
                <th scope="col"></th>
                <th scope="col">Customer</th>
                <th scope="col">Job name</th>
                <th scope="col">Combo</th>
                <th scope="col">Templates</th>
                <th scope="col">Received date</th>
                <th scope="col">Delivery date</th>
                <th scope="col" colspan="2">Status</th>
            </tr>
        </thead>
        <tbody id="tblJobs">
        </tbody>
    </table>
</div>
<nav aria-label="..." class="mt-3">
    <ul class="pagination pagination-sm">
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1">1</a>
        </li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
    </ul>
</nav>



<script src="/js/common.js"></script>

<script type='text/javascript'
    src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>


<%-include('manage-job-modal')%>
    <%-include('upload-job-modal')%>
        <%-include('job-detail-modal')%>
            <%-include('job-detail-modal')%>

                <script>
                    var search = '';
                    var page = 1;
                    var jobId = '';
                    var customerId = '';
                    var allSelected = true;
                    $(document).ready(function () {
                        $('#txtFromDate').val(getCurrentDateWithInitialTime());
                        $('#txtToDate').val(getCurrentTime());

                        //multiple select
                        $('#slJobStatus').multiselect({
                            includeSelectAllOption: true,
                            // enableFiltering: true,  
                        });
                        $('#slJobStatus option').each(function () {
                            this.selected = true;
                        });
                        $('#slJobStatus').multiselect("refresh");


                        // $("#slJobStatus").multiselect('selectAll', true);
                        LoadJobs();
                        setInterval(function () {
                            LoadJobs();
                        }, 10000);//run this thang every 10 seconds
                    })

                    $('#slJobStatus').on('change', function () {
                        LoadJobs();
                    })

                    $(document).on("click", "button[name='js-view-parents']", async function (e) {

                        var $btn = $(e.target), $row = $btn.closest('tr'), $nextRow = $row.next('tr.expand-child');

                        $btn.toggleClass('fa-minus');

                        if ($nextRow.length) {
                            $nextRow.toggle($btn.hasClass('fa-minus'));
                        } else {
                            var newRow = '<tr class="expand-child" id="collapse' + $btn.data('id') + '">' +
                                '<td colspan="10">' +
                                '<table class="table table-condensed table-bordered table-striped" width=100% >' +
                                '<thead>' +
                                '<tr>' +
                                '<th class="text-right  ">#</th>' +
                                '<th>Level</th>' +
                                '<th>Editor</th>' +
                                '<th class="text-center">I-N</th>' +
                                '<th>Q.A</th>' +
                                '<th>DC</th>' +
                                '<th>Uploaded by</th>' +
                                '<th>Uploaded at</th>' +
                                '<th>I-Link</th>' +
                                '<th>O-Link</th>' +
                                '<th>U-Link</th>' +
                                '<th>Status</th>' +
                                '</tr>' +
                                '</thead>' +
                                '<tbody>';
                            jobId = $(this).closest('tr').attr('id');

                            await $.ajax({
                                url: '/tla/job/list-tasks',
                                type: 'get',
                                headers: {
                                    authorization: "Bearer " + localStorage.getItem("accessToken"),
                                },
                                data: {
                                    jobId
                                },
                                success: function (data) {
                                    let idx = 1;

                                    data.job.root.forEach(r => {
                                        newRow += '<tr>';

                                        if (r.tasks.length > 0) {
                                            newRow += '<td rowspan="' + (r.tasks.length + 1) + '" class="text-danger font-weight-bold" > ';
                                            newRow += '<div class="v-middle">';
                                            newRow += r.ref.name;
                                            newRow += '</div>';
                                            newRow += '</td>';
                                        }

                                        newRow += '</tr>';

                                        r.tasks.forEach(t => {
                                            newRow += '<tr id="' + t._id + '" data-root="' + r._id + '">';
                                            newRow += '<td class="font-weight-bold text-primary">';
                                            newRow += t.basic.level.name;

                                            let chk = (data.job.cc.filter(x => x.tasks.includes(t._id))).length > 0 ? true : false;
                                            if (chk) {
                                                newRow += '<i class="fa fa-cc text-danger ml-2" aria-hidden="true"></i>'
                                            }

                                            if (t.status === -10) {
                                                newRow += '<i class="fa fa-pause text-danger ml-2" aria-hidden="true" ></i>';
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.editor.length > 0) {
                                                newRow += t.editor[t.editor.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.editor.length > 0 && t.editor[t.editor.length - 1].submited.length > 0) {
                                                newRow += t.editor[t.editor.length - 1].submited[t.editor[t.editor.length - 1].submited.length - 1].amount;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.qa.length > 0) {
                                                newRow += t.qa[t.qa.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.dc.length > 0 && !t.dc[t.dc.length - 1].unregisted) {
                                                t.dc[t.dc.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.tla.uploaded.length > 0) {
                                                newRow += t.tla.uploaded[t.tla.uploaded.length - 1].by.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.tla.uploaded.length > 0) {
                                                newRow += convertISODateToTimeFormat(t.tla.uploaded[t.tla.uploaded.length - 1].at);
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            switch (t.status) {
                                                case -10: newRow += '<span class="text-danger font-weight-bold">Wait</span>'; break;
                                                case -1: newRow += '<span class="text-info">Initial</span>'; break;
                                                case 0: newRow += '<span class="text-info">Processing</span>'; break;
                                                case 1:
                                                    {
                                                        if (t.editor[t.editor.length - 1].submited.length > 1) {
                                                            newRow += '<span class="text-primary">Fixed</span>';
                                                        } else {
                                                            newRow += '<span class="text-primary">Edited</span>';
                                                        }
                                                        break;
                                                    }
                                                case 2: newRow += '<span class="text-success">Q.A ok!</span>'; break;
                                                case 3: newRow += '<span class="text-success">DC ok!</span>'; break;
                                                case 4: newRow += '<span class="text-info font-weight-bold">Uploaded</span>'; break;
                                                case 5: newRow += '<span class="text-success font-weight-bold">Done</span>'; break;
                                                case 6: newRow += '<span class="text-success font-weight-bold">Finish</span>'; break;
                                                case -2: newRow += '<span class="text-danger">Q.A rejected</span>'; break;
                                                case -3: newRow += '<span class="text-danger">DC rejected</span>'; break;
                                                case -4: newRow += '<span class="text-danger">Sale rejected</span>'; break;
                                                case -5: newRow += '<span class="text-danger">Canceled</span>'; break;
                                                case -6: newRow += '<span class="text-danger font-weight-bold">Customer CC</span>'; break;
                                            }
                                            newRow += '</td>';

                                            newRow += '</tr>';
                                        })

                                    })


                                    data.job.parents.forEach(p => {
                                        newRow += '<tr>';

                                        if (p.tasks.length > 0) {
                                            console.log(p)
                                            newRow += '<td rowspan="' + (p.tasks.length + 1) + '" class="text-danger font-weight-bold" > ';
                                            newRow += '<div class="v-middle">';
                                            if (p.ref !== null) {
                                                newRow += p.ref.name
                                            }
                                            newRow += '</div>';
                                            newRow += '</td>';
                                        }

                                        newRow += '</tr>';


                                        p.tasks.forEach(t => {
                                            newRow += '<tr id="' + t._id + '" data-parents="' + p._id + '">';
                                            newRow += '<td class="font-weight-bold text-primary">';
                                            newRow += t.basic.level.name;

                                            let chk = (data.job.cc.filter(x => x.tasks.includes(t._id))).length > 0 ? true : false;
                                            if (chk) {
                                                newRow += '<i class="fa fa-cc text-danger ml-2" aria-hidden="true"></i>'
                                            }

                                            if (t.status === -10) {
                                                newRow += '<i class="fa fa-pause text-danger ml-2" aria-hidden="true" ></i>';
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.editor.length > 0) {
                                                newRow += t.editor[t.editor.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.editor.length > 0 && t.editor[t.editor.length - 1].submited.length > 0) {
                                                newRow += t.editor[t.editor.length - 1].submited[t.editor[t.editor.length - 1].submited.length - 1].amount;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.qa.length > 0) {
                                                newRow += t.qa[t.qa.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.dc.length > 0 && !t.dc[t.dc.length - 1].unregisted) {
                                                t.dc[t.dc.length - 1].staff.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.tla.uploaded.length > 0) {
                                                newRow += t.tla.uploaded[t.tla.uploaded.length - 1].by.username;
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            if (t.tla.uploaded.length > 0) {
                                                newRow += convertISODateToTimeFormat(t.tla.uploaded[t.tla.uploaded.length - 1].at);
                                            }
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            newRow += '</td>';

                                            newRow += '<td>';
                                            switch (t.status) {
                                                case -10: newRow += '<span class="text-danger font-weight-bold">Wait</span>'; break;
                                                case -1: newRow += '<span class="text-info">Initial</span>'; break;
                                                case 0: newRow += '<span class="text-info">Processing</span>'; break;
                                                case 1:
                                                    {
                                                        if (t.editor[t.editor.length - 1].submited.length > 1) {
                                                            newRow += '<span class="text-primary">Fixed</span>';
                                                        } else {
                                                            newRow += '<span class="text-primary">Edited</span>';
                                                        }
                                                        break;
                                                    }
                                                case 2: newRow += '<span class="text-success">Q.A ok!</span>'; break;
                                                case 3: newRow += '<span class="text-success">DC ok!</span>'; break;
                                                case 4: newRow += '<span class="text-info font-weight-bold">Uploaded</span>'; break;
                                                case 5: newRow += '<span class="text-success font-weight-bold">Done</span>'; break;
                                                case 6: newRow += '<span class="text-success font-weight-bold">Finish</span>'; break;
                                                case -2: newRow += '<span class="text-danger">Q.A rejected</span>'; break;
                                                case -3: newRow += '<span class="text-danger">DC rejected</span>'; break;
                                                case -4: newRow += '<span class="text-danger">Sale rejected</span>'; break;
                                                case -5: newRow += '<span class="text-danger">Canceled</span>'; break;
                                                case -6: newRow += '<span class="text-danger font-weight-bold">Customer CC</span>'; break;
                                            }
                                            newRow += '</td>';

                                            newRow += '</tr>';
                                        })

                                    })
                                }
                            })
                            newRow += '</tbody></table></td></tr>';
                            // set next row
                            $nextRow = $(newRow).insertAfter($row);


                            /*}
                                });*/
                        }
                    });


                    $(document).on("click", "button[name='btn-upload-job']", function () {
                        jobId = $(this).closest('tr').attr('id');
                        $('#uploadJobModal').modal();
                    })


                    $(document).on("click", "button[name='process-job']", function () {
                        jobId = $(this).closest('tr').attr('id');
                        customerId = $(this).closest('tr').data('customer');
                        isShown = false;
                        $('.btn-job-info').html('Show job info<i class="fa fa-arrow-down" aria-hidden="true"></i>');
                        $('#JobMngrModal').modal();

                    })

                    $(document).on("click", ".pagination li", function (e) {
                        e.preventDefault();
                        page = $(this).find('a').text();
                        LoadJobs();
                    })

                    function LoadJobs() {

                        fromdate = strToDate($('#txtFromDate').val());
                        todate = strToDate($('#txtToDate').val());
                        if (isNaN(fromdate) || fromdate === null) {
                            $.toast({
                                heading: 'Error',
                                text: 'From date is invalid date time!',
                                showHideTransition: 'fade',
                                icon: 'error'
                            });
                            return;
                        }
                        if (isNaN(todate) || todate === null) {
                            $.toast({
                                heading: 'Error',
                                text: 'From date is invalid date time!',
                                showHideTransition: 'fade',
                                icon: 'error'
                            });
                            return;
                        }
                        $.ajax({
                            url: '/tla/job/list',
                            type: 'get',
                            headers: {
                                authorization: "Bearer " + localStorage.getItem("accessToken"),
                            },
                            data: {
                                fromdate,
                                todate,
                                status: $('#slJobStatus').val(),
                                search,
                                page
                            },
                            success: function (data, textStatus, xhr) {

                                $('.pagination').empty();
                                for (let i = 1; i <= data.pages; i++) {
                                    let li = '<li class="page-item"><a class="page-link" href="#">' + i + '</a></li>';
                                    $('.pagination').append(li);
                                }


                                $('#tblJobs').empty();
                                idx = (page - 1) * data.pageSize;
                                data.jobs.forEach(job => {

                                    let tr = '<tr id="' + job._id + '" data-customer="' + job.customer._id + '">';
                                    tr += '<td>';
                                    let size = 0;
                                    job.root.forEach(r => {
                                        size += r.tasks.length;
                                    })
                                    job.parents.forEach(p => {
                                        size += p.tasks.length;
                                    })

                                    if (size > 0) {
                                        tr += '<button class="btn btn-xs btn-info parents js-view-parents" name="js-view-parents"> (';
                                        tr += size;
                                        tr += ') <i class="fa fa-plus"></i></button>';

                                    }

                                    tr += '</td>';
                                    tr += '<td>' + (++idx) + '</td>'
                                    tr += '<td>';
                                    if (job.status == -1 || job.status == 0) {
                                        tr += '<button class="btn btn-xs btn-primary ml-2" name="process-job"><i class="fa fa-bars" aria-hidden="true"></i></button>';
                                    }
                                    tr += '<button class="btn btn-xs btn-warning ml-2" name="btn-upload-job"><i class="fa fa-upload" aria-hidden="true"></i></button>';
                                    tr += '</td>';
                                    tr += '<td class="font-weight-bold">' + (getFirstLetters(job.customer.firstname + ' ' + job.customer.lastname)).toUpperCase() + getLastLetters(job.customer._id) + '</td>';
                                    tr += '<td class="font-weight-bold">';
                                    tr += job.name;
                                    if (job.captured && job.captured.user) {
                                        tr += '<i class="fa fa-camera text-info ml-2" aria-hidden="true"></i>'
                                    }
                                    if (job.cc.length > 0) {
                                        tr += '<span class="ml-2 text-danger"><i class="fa fa-cc" aria-hidden="true"></i></span>'
                                    }
                                    tr += '</td>';

                                    tr += '<td class="font-weight-bold">';
                                    if (job.cb) {
                                        tr += job.cb.name;
                                    }
                                    tr += '</td>';
                                    tr += '<td class="font-weight-bold">';
                                    let templates = job.templates.map(x => {
                                        return x.root ? x.root.name : x.parents.name;
                                    })
                                    tr += templates;
                                    tr += '</td>';
                                    tr += "<td>" + convertISODateToTimeFormat(job.deadline.begin) + "</td>";
                                    tr += '<td ';
                                    if (job.urgent || job.cc.length > 0) {
                                        tr += 'style="background-color:rgba(245,0,0,0.5); color:white; font-weight: bold;"'
                                    }

                                    tr += '>' + convertISODateToTimeFormat(job.deadline.end) + '</td>';
                                    tr += '<td><i>';
                                    switch (job.status) {
                                        case -1:
                                            tr += '<span class = "text-warning">Initial</span>';
                                            break;
                                        case 0:
                                            tr += '<span class = "text-info">Processing</span>';
                                            break;
                                        case 1:
                                            tr += '<span class = "text-primary">Upload</span>';
                                            break;
                                        case 2:
                                            tr += '<span class = "text-success">Done</span>';
                                            break;
                                        case -2:
                                            tr += '<span class = "text-danger">Rejected</span>';
                                            break;
                                        case -3:
                                            tr += '<span class = "text-muted">Canceled</span>';
                                            break;
                                    }
                                    tr += '</i></td>';
                                    tr += '</tr>';
                                    $('#tblJobs').append(tr);
                                })

                                $('.pagination').empty();
                                for (let i = 1; i <= data.pages; i++) {
                                    let li = '<li class="page-item"><a class="page-link" href="#">' + i + '</a></li>';
                                    $('.pagination').append(li);
                                }

                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                $('#tblJobs').empty();
                                $('.pagination').empty();
                                $.toast({
                                    heading: 'Error',
                                    text: jqXHR.responseJSON.msg,
                                    showHideTransition: 'fade',
                                    icon: 'error'
                                });
                            }
                        })
                    }

                    function LoadCustomer() {
                        $('#slCustomerLevles').empty();
                        $.ajax({
                            url: '/tla/customer/detail',
                            type: 'get',
                            headers: {
                                authorization: "Bearer " + localStorage.getItem("accessToken"),
                            },
                            data: { customerId },
                            success: function (data) {
                                CustomerLevels = data.customer.contracts.map(x => {
                                    let obj = {};
                                    obj._id = x.root ? x.root._id : x.parents._id;
                                    obj.name = x.root ? x.root.name : x.parents.name;
                                    obj.is_root = x.root ? 1 : 0;
                                    return obj;
                                })
                                BindContract();


                                $('.divNationalStyle').html('<i class="text-warning font-weight-bold">' + data.customer.style.nation.name + '</i>');
                                $('.divColor').html('<i class="text-warning font-weight-bold">' + data.customer.style.color.name + '</i>');
                                $('.divSize').html('<i class="text-warning font-weight-bold">' + data.customer.style.size.name + '</i>');
                                $('.divOutput').html('<i class="text-warning font-weight-bold">' + data.customer.style.output.name + '</i>');
                                $('.divCloud').html('<i class="text-warning font-weight-bold">' + data.customer.style.cloud.name + '</i>')

                                if (data.customer.style.align.checked) {
                                    if (data.customer.style.align.note.trim().length > 0) {
                                        $('.divAlign').html(data.customer.style.align.note);
                                    } else {
                                        $('.divAlign').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
                                    }
                                } else {
                                    $('.divAlign').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
                                }

                                if (data.customer.style.sky.checked) {
                                    if (data.customer.style.sky.note.trim().length > 0) {
                                        $('.divSky').html(data.customer.style.sky.note);
                                    } else {
                                        $('.divSky').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
                                    }
                                } else {
                                    $('.divSky').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
                                }

                                if (data.customer.style.fire.checked) {
                                    if (data.customer.style.fire.note.trim().length > 0) {
                                        $('.divFire').html(data.customer.style.fire.note);
                                    } else {
                                        $('.divFire').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
                                    }
                                } else {
                                    $('.divFire').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
                                }

                                if (data.customer.style.tv.checked) {
                                    if (data.customer.style.tv.note.trim().length > 0) {
                                        $('.divTV').html(data.customer.style.tv.note);
                                    } else {
                                        $('.divTV').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
                                    }
                                } else {
                                    $('.divTV').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
                                }

                                if (data.customer.style.grass.checked) {
                                    if (data.customer.style.grass.note.trim().length > 0) {
                                        $('.divGrass').html(data.customer.style.grass.note);
                                    } else {
                                        $('.divGrass').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
                                    }
                                } else {
                                    $('.divGrass').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
                                }
                                $('.lblStyleNote').text(data.customer.style.style_note);
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Opp.....!',
                                    text: jqXHR.responseJSON.msg
                                })
                            }
                        })
                    }


                    function LoadJob() {
                        $.ajax({
                            url: '/tla/job/detail',
                            type: 'get',
                            headers: {
                                authorization: "Bearer " + localStorage.getItem("accessToken"),
                            },
                            data: {
                                jobId
                            },
                            success: function (data) {
                                $('.lblCustomer').text(getFirstLetters(data.job.customer.name.firstname + ' ' + data.job.customer.name.lastname) + getLastLetters(data.job.customer._id));
                                $('.lblJobName').text(data.job.name);
                                $('.lblReceivedDate').text(convertISODateToTimeFormat(data.job.deadline.begin));
                                $('.lblDeliveriedDate').text(convertISODateToTimeFormat(data.job.deadline.end));
                                $('.lblIntruction').text(data.job.intruction);
                                $('.lblInputLink').html('<a href="' + data.job.link.input + '" target="_blank" rel="noopener noreferrer">Click here</a>');

                                $('.tblComboLines').empty();

                                if (typeof data.job.cb !== 'undefined' && data.job.cb) {
                                    let idx = 1;
                                    data.job.cb.lines.forEach(l => {
                                        let name = l.root ? l.root.name : l.parents.name;
                                        let tr = '<tr>';
                                        tr += '<td>' + (idx++) + '</td>';
                                        tr += '<td class="text-danger font-weight-bold">' + (l.root ? l.root.name : l.parents.name) + '</td>';
                                        tr += '<td class="text-right">' + l.quantity + '</td>';
                                        tr += '</tr>';
                                        $('.tblComboLines').append(tr);
                                    })
                                }
                            }
                        })
                    }



                    //phan xu ly lien quan toi job detail
                    $(document).ready(function () {
                        $('.job-info').hide();
                    })

                    var isShown = false;
                    $('.btn-job-info').click(function () {
                        if (!isShown) {
                            $('.job-info').slideDown(1000);
                            $('.btn-job-info').html('Hide job info <i class="fa fa-arrow-up" aria-hidden="true"></i>');

                        } else {
                            $('.btn-job-info').html('Show job info <i class="fa fa-arrow-down" aria-hidden="true"></i>');
                            $('.job-info').slideUp(1000);
                        }
                        isShown = !isShown;
                    })
                </script>