<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/common.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />
<script type='text/javascript'
  src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>


<div class="modal" tabindex="-1" id="JobMngrModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body text-dark">
        <div class="panel panel-info mb-3">
          <div class="panel-heading"> <button class="btn btn-xs btn-primary btn-job-info">Show job info
              <i class="fa fa-arrow-down" aria-hidden="true"></i></button> </div>
          <%-include('panel-job-info')%>

            <div class="panel-footer">
              <div class="row mt-2">
                <div class="col-md-12 col-sm-12 col-xs-12">
                  <button class="btn btn-sm btn-success" id="btnAddTask"><i class="fa fa-plus"></i> Add Task</button>
                </div>
              </div>
            </div>

        </div>





        <div class="table-responsive  table-responsive-sm table-responsive-xs mt-2">
          <table class="table mt-1 table-striped bg-white text-dark nowrap text-nowrap">
            <thead class="thead-dark">
              <tr>

                <th scope="col">#</th>
                <th scope="col">Level</th>
                <th scope="col">Assign date</th>
                <th scope="col">Deadline</th>
                <th scope="col">Remark</th>
                <th scope="col">Editor</th>
                <th scope="col">Q.A</th>
                <th scope="col">Link</th>
                <th scope="col">Status</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="tblTasks"></tbody>
          </table>
        </div>


        <div class="panel panel-primary" id="divAddOrUpdateTask">
          <div class="panel-heading font-w">
            <div class="row">
              <div class="col-md-11 col-sm-11 col-xs-11">
                Add or update task
              </div>
              <div class="col-md-1 col-sm-1 col-xs-1 text-right">
                <button class="btn btn-xs btn-danger btnCancel">
                  <i class="fa fa-close"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="panel-body">
            <div class="row">
              <div class="col-md-7 col-sm-6 col-xs-6 form-group">
                <label for="">Customer level</label>
                <select name="" id="slCustomerLevles" class="form-control"></select>
              </div>
              <div class="col-md-5 col-sm-6 col-xs-6 form-group">
                <label for="">Local level</label>
                <select name="" id="slLocalLevels" class="form-control"></select>
              </div>
            </div>

            <div class="row">
              <div class="col-md-5 col-sm-5 col-xs-5">
                <div class="form-group">
                  <label for="">Assign Date<span class="text-danger font-weight-bold">(*)</span>: </label>
                  <input type="text" class="inputDate form-control" id="txtAssignDate">
                </div>
              </div>

              <div class="col-md-2 col-sm-2 col-xs-2">
                <div class="form-group">
                  <label for="">Hours:</label>
                  <input type="text" class="form-control text-right" id="txtDuration" value="0">
                </div>
              </div>

              <div class="col-md-5 col-sm-5 col-xs-5">
                <div class=" form-group">
                  <label for="">Deadline<span class="text-danger font-weight-bold">(*)</span>:</label>
                  <input type="text" class="inputDate form-control" id="txtDeadline">
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Images Link:</label>
                <input type="text" class="form-control" id="txtInputLink">
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Remark:</label>
                <input type="text" name="txtRemark" id="txtRemark" class="form-control" placeholder="Task remark">
              </div>
            </div>

            <hr />
            <div class="row">
              <div class="col-xs-6">
                <div class="form-check mt-1">
                  <input class="form-check-input" type="checkbox" value="" id="ckbAssignEditor" />
                  <label class="form-check-label" for="defaultCheck1">
                    Assign Editor
                  </label>
                </div>
              </div>
              <div class="col-xs-6">
                <div class="form-check mt-1">
                  <input class="form-check-input" type="checkbox" value="" id="ckbAssignQA" />
                  <label class="form-check-label" for="defaultCheck1">
                    Assign Q.A
                  </label>
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                <div id="colEditor">
                  <select name="" id="slEditor" class="form-control selectpicker" data-live-search="true"></select>
                </div>
              </div>

              <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                <div id="colQA">
                  <select name="" id="slQA" class="form-control  selectpicker" data-live-search="true"></select>
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12 form-group">
                <label for="">Initial status:</label>
                <div>
                  <label class="radio-inline"><input type="radio" name="optradio" checked id="rbtStart">Start</label>
                  <label class="radio-inline"><input type="radio" name="optradio" id="rbtPause">Pause</label>
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12">
                <label for="" class="font-weight-bold text-danger" id="lblError"></label>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12 col-sm-12 col-xs-12 text-center">
                <button class="btn btn-success" id="btnSubmit">
                  <i class="fa fa-floppy-o" aria-hidden="true"></i> Submit changes
                </button>
              </div>
            </div>
          </div>
        </div>
        <div class="form-row">
          <div class="col-sm-12">
            <label class="font-weight-bold text-danger mt-3" id="msgError"></label>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>




<script type="text/javascript">
  let idx = 1;
  var taskId = '';
  var levelId = '';
  var cc = '';
  var CustomerLevels = [];


  $("#slCustomerLevles").change(function () {
    LoadLocalLevel();
  });

  $("#slLocalLevels").change(function () {
    LoadQA();
    LoadEditor();
  });




  //sự kiện click button sửa task trên table

  $(document).on("click", "button[name='btnEditTask']", function () {
    taskId = $(this).closest("tr").attr("id");

    $.ajax({
      url: '/tla/task/detail',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        taskId
      },
      success: function (data) {

        levelId = data.task.basic.level._id;

        $('#divAddOrUpdateTask').slideUp(200);
        $('#divAddOrUpdateTask').slideDown(1000);

        $('#slJobLevels').val(data.task.basic.level._id);
        $('#slJobLevels').attr("disabled", true);

        $('#txtAssignDate').val(convertISODateToTimeFormat(data.task.basic.deadline.begin));
        if (data.task.basic.deadline.end) {
          $('#txtDeadline').val(convertISODateToTimeFormat(data.task.basic.deadline.end));
        }

        $('#txtInputLink').val(data.task.basic.link.input);

        $('#txtRemark').val(data.task.remarks[data.task.remarks.length - 1].content);

        $('#ckbAssignQA').prop('checked', (data.task.qa.length > 0 && data.task.qa[data.task.qa.length - 1].tla !== 'undefined') ? true : false);

        if (data.task.editor.length === 0) {
          $('#ckbAssignEditor').show();
          $('#ckbAssignEditor').prop('checked', false);
          $('#colEditor').slideUp();
        } else {
          $('#ckbAssignEditor').prop('checked', true);
          if (data.task.status < 1 && data.task.editor.length > 0 && data.task.editor[data.task.editor.length - 1].editor !== 'undefined') {
            $('#ckbAssignEditor').show();
            $('#colEditor').show();

            $('#slEditor').val(data.task.editor[data.task.editor.length - 1].staff._id).selectpicker('refresh');
            if (data.task.status > 1) {
              $('#ckbAssignEditor').attr("disabled", true);
              $('#slEditor').attr("disabled", true);
            } else {
              $('#ckbAssignEditor').attr("disabled", false);
              $('#slEditor').attr("disabled", false);
            }
          } else {
            $('#colEditor').hide();
            $('#ckbAssignEditor').hide();
          }
        }


        if ((data.task.qa.length > 0 && data.task.qa[data.task.qa.length - 1].tla !== 'undefined')) {
          $('#colQA').show();

          $('#slQA').val(data.task.qa[data.task.qa.length - 1].staff._id).selectpicker('refresh');
          if (data.task.status > 1) {
            $('#ckbAssignQA').attr("disabled", true);
            $('#slQA').attr("disabled", true);
          } else {
            $('#ckbAssignQA').attr("disabled", false);
            $('#slQA').attr("disabled", false);
          }
        } else {
          $('#colQA').hide();
        }

        if (data.task.status == -10) {
          $('#rbtPause').prop('checked', true);
        } else {
          $('#rbtStart').prop('checked', true);
        }
      }
    })
  })

  $("#JobMngrModal").on('hide.bs.modal', function () {
    LoadJobs();
  });



  $('#txtDuration').keyup(function (e) {
    if (/\D/g.test(this.value)) {
      // Filter non-digits from input value.
      this.value = this.value.replace(/\D/g, '');
    }
    let duration = parseInt($('#txtDuration').val());
    let assigned_date = strToDate($('#txtAssignDate').val());
    let deadline = assigned_date.addHours(duration);
    $('#txtDeadline').val(convertISODateToTimeFormat(deadline));
  });



  $('#btnAddTask').click(function () {

    cc = {};

    $('#txtInputLink').val('');
    $('#txtRemark').val('');
    $('#divAddOrUpdateTask').slideUp(500);
    $('#rbtStart').prop('checked', true);


    $('#divAddOrUpdateTask').slideDown(1000);
    $('#divAssign').slideUp(200);
    $('#divEditTask').slideUp(200);
    $("button[name='btnAssignStaff']").show(100);
    $("button[name='btnDelTask']").show(100);

    $('#slJobLevels').attr("disabled", false);


    taskId = '';
    $('#colEditor').hide();
    $('#colQA').hide();
    $('#ckbAssignEditor').prop('checked', false);
    $('#ckbAssignQA').prop('checked', false);

    LoadEditor();
    LoadQA();
  })

  $('.btnCancel').on('click', function () {
    $('#divAddOrUpdateTask').slideUp(500);
    $("button[name='btnAssignStaff']").show(100);
    $("button[name='btnDelTask']").show(100);
    taskId = '';
  })

  $("#JobMngrModal").on('shown.bs.modal', function (e) {
    LoadTasks();
    LoadJob();
    LoadCCList();
    LoadCustomer();

    $('.job-info').hide();
    $('#divLevel').hide();
    $('#divEditTask').hide();
    $('#divAssign').hide();
    $('#divAddOrUpdateTask').hide();
    $('#txtAssignDate').val(getCurrentTime())
  });

  function LoadContract() {
    $('#slCustomerLevles').empty();
    CustomerLevels.forEach(l => {
      $('#slCustomerLevles').append('<option value="' + l._id + '" data-root="' + l.is_root + '">' + l.name + '</option>');
    })
    LoadLocalLevel();
  }

  function LoadLocalLevel() {
    $.ajax({
      url: '/tla/job/local-level',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        customer_level: $('#slCustomerLevles option:selected').val(),
        is_root: $('#slCustomerLevles option:selected').data('root') == '1' ? true : false
      },
      success: function (data) {
        $('#slLocalLevels').empty();
        data.local_levels.forEach(l => {
          let opt = '<option value="' + l._id + '">' + l.name + '</option>';
          $('#slLocalLevels').append(opt);
        })

        LoadQA();
        LoadEditor();
      }

    })
  }



  function LoadCCList() {
    $.ajax({
      url: '/tla/job/list-cc',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        jobId
      },
      success: function (data) {
        $('.tblCCList').empty();
        let idx = 1;
        data.cc.forEach(c => {
          let tr = '<tr id="' + c._id + '"';
          if (c.root) {
            tr += ' data-root="' + c.root._id + '"';
            tr += 'data-type = "1"';
          }
          if (c.parents) {
            tr += ' data-root="' + c.parents._id + '"';
            tr += 'data-type = "0"';
          }

          if (!c.root && !c.parents) {
            tr += 'data-type = "-1"';
          }         

          tr += '>';

          tr += '<td>' + (idx++) + '</td>';
          tr += '<td class="font-weight-bold text-danger text-left">';
          if (c.root) {
            tr += c.root.name;
          }
          if (c.parents) {
            tr += c.parents.name;
          }
          tr += '</td>';

          tr += '<td class="text-left" name="remark">' + c.remark + '</td>';
          tr += '<td class="text-left font-italic text-right">';

          tr += '</td>';
          tr += '<td class="text-right">';
          tr += '<button class="btn btn-xs btn-danger" name="btnCC"><i class="fa fa-play" aria-hidden="true"></i></button>';
          tr += '</td>'
          tr += '</tr>';
          $('.tblCCList').append(tr);
        })
      }
    })
  }

  function LoadTasks() {
    $.ajax({
      url: '/tla/task/list',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        jobId
      },
      success: function (data) {
        let idx = 1;
        $("#tblTasks").empty();
        data.tasks.forEach(t => {

          let tr = '<tr id="' + t._id + '">';

          tr += "<td>" + idx++ + "</td>";


          tr += "<td class='font-weight-bold text-info'>";
          if (t.status == -10) {
            tr += '<i class="fa fa-pause text-danger" aria-hidden="true" style="margin-right: 10px;"></i>';
          }
          tr += t.basic.level.name;
          if (t.fixible_task || t.additional_task) {
            tr += ' <span class="text-danger"><i class="fa fa-cc" aria-hidden="true"></i></span>';
          }

          tr += "</td>";
          tr += "<td>" + convertISODateToTimeFormat(t.basic.deadline.begin) + "</td>";

          tr += '<td>';
          if (typeof t.basic.deadline.end !== 'undefined') {
            tr += convertISODateToTimeFormat(t.basic.deadline.end);
          }
          tr += '</td>';

          tr += '<td>';
          if (t.remarks.length > 0) {
            tr += t.remarks[t.remarks.length - 1].content;
          }
          tr += '</td>';


          tr += '<td>';
          if (t.editor.length > 0)
            tr += t.editor[t.editor.length - 1].staff.username;
          tr += "</td>";

          tr += '<td>';
          if (typeof t.qa !== 'undefined' && t.qa.length > 0)
            tr += t.qa[t.qa.length - 1].staff.username;
          tr += '</td>'


          tr += '<td>';
          if (isValidHttpUrl(t.basic.link.input)) {
            tr += '<a href="' + t.basic.link.input + '" target="_blank">Link</a>'
          } else {
            tr += t.basic.link.input
          }

          tr += '</td>';


          tr += '<td class="font-italic">';
          switch (t.status) {
            case -10:
              tr += '<span class="text-danger font-weight-bold">Wait</span>';
              break;
            case 0: tr += '<span class="text-info">Processing</span>'; break;
            case 1: {
              if (t.editor[0].submited.times > 1) {
                tr += '<span class="text-primary">Fixed</span>';
              } else {
                tr += '<span class="text-primary">Edited</span>';
              }
              break;
            }
            case 2: tr += '<span class="text-success">Q.A ok</span>'; break;
            case 3: tr += '<span class="text-success">DC ok</span>'; break;
            case -1: tr += '<span class="text-info">Initial</span>'; break;
            case -2: tr += '<span class="text-danger">Q.A reject</span>'; break;
            case -3: tr += '<span class="text-danger">DC reject</span>'; break;
            case -6: tr += '<span class="text-danger">Customer Reject</span>'; break;
            case 4: tr += '<span class="text-success">Upload</span>'; break;
            case 5: tr += '<span class="text-success">Done</span>'; break;
            case 6: tr += '<span class="text-success">Finish</span>'; break;
          }
          tr += '</td>';



          tr += '<td class="text-right">';

          if (t.status < 1) {
            tr += '<button class="ml-1 btn btn-xs btn-danger" name="btnDelTask"><i class="fa fa-trash text-white" aria-hidden="true"></i></button>';
          }

          tr += '<button class="ml-1 btn btn-xs btn-warning" name="btnEditTask"><i class="fa fa-edit"></i></button>';
          tr += '</td>';

          tr += "</tr>";

          $("#tblTasks").append(tr);
        })
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
        $('#msgError').show().delay(3000).fadeOut();
      },
    });
  }

  function LoadEditor() {
    $.ajax({
      url: '/tla/user/list-editor',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        levelId: $('#slLocalLevels option:selected').val()
      },
      success: function (data) {
        $('#slEditor').empty();
        data.editors.forEach(e => {
          let opt = '<option value="' + e._id + '">' + e.fullname + ' ( ' + e.username + ' )</option>';
          $('#slEditor').append(opt);
        })
        $('#slEditor').selectpicker();
        $('#slEditor').selectpicker('refresh');
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
        $('#msgError').fadeIn().delay(3000).fadeOut();
      },
    })
  }


  function LoadQA() {
    $.ajax({
      url: '/tla/user/list-qa',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        levelId: $('#slLocalLevels option:selected').val()
      },
      success: function (data) {
        $('#slQA').empty();
        data.qas.forEach(q => {
          let opt = '<option value="' + q._id + '">' + q.fullname + ' ( ' + q.username + ' )</option>';
          $('#slQA').append(opt);
        })
        $('#slQA').selectpicker();
        $('#slQA').selectpicker('refresh');
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
        $('#msgError').fadeIn().delay(3000).fadeOut();
      },
    })
  }



  $(document).on("click", "button[name='btnCC']", function () {
    cc = $(this).closest('tr').attr('id');   
    let ccType= $(this).closest('tr').data('type');
    let rootId=  $(this).closest('tr').data('root');
    let remark = $(this).closest('tr').find('td[name="remark"]').text();
    
   $('#txtRemark').val(remark);

    $.ajax({
      url: '/tla/job/detail',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: { jobId },
      success: function (data) {
        CustomerLevels = [];
        switch (ccType) {
          case -1:
            console.log(data.job.parents)
            data.job.parents.forEach(p => {
              CustomerLevels.push({
                _id: p.ref._id,
                name: p.ref.name              
              })
            })

            data.job.root.forEach(r => {
              CustomerLevels.push({
                _id: r.ref._id,
                name: r.ref.name,
              })
            })
            break;
          case 0:
            CustomerLevels = (data.job.parents.filter(p => p.ref._id === rootId)).map(x => {
              let obj = {};
              obj._id = x.ref._id;
              obj.name = x.ref.name;
              return obj;
            });
            break;
          case 1:
            CustomerLevels = (data.job.root.filter(r => r.ref._id === rootId)).map(x => {
              let obj = {};
              obj._id = x.ref._id;
              obj.name = x.ref.name;
              return obj;
            });
            break;
        }        

        // $('.btn-job-info').click();
        $('#divAddOrUpdateTask').slideDown(500);
        LoadContract();
      }
    })

  })



  $(document).on("click", "button[name='btnEditTask']", function () {
    $('#divAssign').hide(100);
    $('#divLevel').hide(100);
    $('#divEditTask').slideDown(1000);
  })

  $(document).on("click", "button[name='btnDelTask']", function () {

    let _id = $(this).closest("tr").attr("id");
    Swal.fire({
      icon: 'question',
      title: 'Do you want to delete this task?',
      showDenyButton: true,
      showCancelButton: true,
      confirmButtonText: 'Yes',
      denyButtonText: `No`,
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
          url: '/tla/task',
          type: 'delete',
          headers: {
            authorization: "Bearer " + localStorage.getItem("accessToken"),
          },
          data: {
            _id
          },
          success: function (data) {
            Swal.fire({
              icon: 'success',
              title: 'Deleted',
              text: data.msg
            });
            LoadTasks();
          }
          , error: function (jqXHR, textStatus, errorThrown) {
            Swal.fire({
              icon: 'error',
              title: 'Opp..',
              text: jqXHR.responseJSON.msg
            });
          }
        })
      }
    })
  })


  $("#ckbAssignEditor").change(function () {
    if (this.checked) {
      $('#colEditor').slideDown(500);
    } else {
      $('#colEditor').slideUp(500);
    }
  });
  $("#ckbAssignQA").change(function () {
    if (this.checked) {
      $('#colQA').slideDown(500);
    } else {
      $('#colQA').slideUp(500);
    }
  });

  $("#btnSubmit").click(function () {
    let customer_level = $('#slCustomerLevles option:selected').val();
    let is_root = ($('#slCustomerLevles option:selected').data('root')) == '1' ? true : false;
    let level = $("#slLocalLevels option:selected").val();

    let assigned_date = strToDate($('#txtAssignDate').val());
    let deadline = strToDate($('#txtDeadline').val());
    let input_link = $('#txtInputLink').val();
    let remark = $('#txtRemark').val();
    let editor = $("#ckbAssignEditor").is(':checked') ? $('#slEditor option:selected').val() : null;
    let qa = $("#ckbAssignQA").is(':checked') ? $('#slQA option:selected').val() : null;
    let status = -1;

    // validateion component inputs

    if (isNaN(assigned_date) || assigned_date === null) {
      $('#msgError').text('(*) Assign date or deadline is invalid!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }


    if (taskId.trim().length == 0) {
      $.ajax({
        url: '/tla/task',
        type: 'post',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          jobId,
          customer_level,
          is_root,
          level,
          assigned_date,
          deadline,
          input_link,
          remark,
          qa,
          editor,
          start: $('#rbtStart').is(':checked'),
          cc
        },
        success: function (data) {
          Swal.fire({
            icon: 'success',
            title: 'Successfully!',
            text: data.msg
          })
          LoadTasks();
          $('#txtInputLink').val('');
          $('#txtRemark').val('');
          $('#divAddOrUpdateTask').slideUp(500);
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
          $('#msgError').show().delay(10000).fadeOut();
        },
      })
    } else {
      $.ajax({
        url: '/tla/task',
        type: 'put',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          taskId,
          level,
          assigned_date,
          deadline,
          input_link,
          remark,
          qa,
          editor,
          start: $('#rbtStart').is(':checked'),
          cc
        },
        success: function (data) {
          Swal.fire({
            icon: 'success',
            title: 'Successfully!',
            text: data.msg
          })
          LoadTasks();
          LoadJob();
          $('#txtInputLink').val('');
          $('#txtRemark').val('');
          $('#divAddOrUpdateTask').slideUp(500);
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
          $('#msgError').show().delay(3000).fadeOut();
        },
      })
    }

  });

  $('.inputDate').inputmask("datetime", {
    mask: "1/2/y h:s",
    placeholder: "dd/mm/yyyy hh:mm",
    leapday: "-02-29",
    separator: "/",
    alias: "dd/mm/yyyy hh:mm"
  })




</script>