<script src="/js/bootstrap-select.min.js"></script>
<script src="/js/common.js"></script>
<link href="/css/bootstrap-select.min.css" rel="stylesheet" />
<script type='text/javascript'
  src="https://rawgit.com/RobinHerbots/jquery.inputmask/3.x/dist/jquery.inputmask.bundle.js"></script>

<div class="modal" tabindex="-1" id="JobMngrModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-body text-dark">
        <div class="panel panel-info mb-3">
          <div class="panel-heading font-weight-bold">
            <i class="fa fa-tasks" aria-hidden="true"></i>
            <label id="name_case" class="text-uppercase"></label> - <label id="customer" class="text-danger"></label>
          </div>
          <div class="panel-body">

            <div class="row">
              <div class="col-md-2 col-sm-3 col-xs-4">
                <label class="font-weight-bold">Style note:</label>
              </div>
              <div class="col-md-10 col-sm-9 col-xs-8">
                <label id="style_note" class="text-danger"></label>
              </div>
            </div>


            <div class="row">
              <div class="col-md-2 col-sm-3 col-xs-4">
                <label class="font-weight-bold">Intruction:</label>
              </div>
              <div class="col-md-10 col-sm-9 col-xs-8">
                <label id="job_intruction" class="text-warning"></label>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12 col-sm-12 col-xs-12">
                <button class="btn btn-sm btn-success" id="btnAddTask"><i class="fa fa-plus"></i> Add Task</button>
              </div>
            </div>
          </div>
        </div>





        <div class="table-responsive  table-responsive-sm table-responsive-xs mt-2">
          <table class="table mt-1 table-striped bg-white text-dark nowrap text-nowrap">
            <thead class="thead-dark">
              <tr>

                <th scope="col">#</th>
                <th scope="col">Level</th>
                <th scope="col">Assign date</th>
                <th scope="col">Deadline</th>
                <th scope="col">Remark</th>
                <th scope="col">Editor</th>
                <th scope="col">Q.A</th>
                <th scope="col">Link</th>
                <th scope="col">Status</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="tblTasks"></tbody>
          </table>
        </div>

 
        <div class="panel panel-primary" id="divAddOrUpdateTask">
          <div class="panel-heading font-w">
            <div class="row">
              <div class="col-md-11 col-sm-11 col-xs-11">
                Add or update task
              </div>
              <div class="col-md-1 col-sm-1 col-xs-1 text-right">
                <button class="btn btn-xs btn-danger btnCancel">
                  <i class="fa fa-close"></i>
                </button>
              </div>
            </div>
          </div>
          <div class="panel-body">

            <div class="row">
              <div class="col-md-6 col-sm-12 col-xs-12">
                <div class="form-group">
                  <label for="">Job level</label>
                  <select name="" id="slJobLevels" class="form-control"></select>
                </div>

              </div>
              <div class="col-md-3 col-sm-6 col-xs-6">
                <div class="form-group">
                  <label for="">Assign Date<span class="text-danger font-weight-bold">(*)</span>: </label>
                  <input type="text" class="inputDate form-control" id="txtAssignDate">
                </div>
              </div>

              <div class="col-md-3 col-sm-6 col-xs-6">
                <div class=" form-group">
                  <label for="">Deadline<span class="text-danger font-weight-bold">(*)</span>:</label>
                  <input type="text" class="inputDate form-control" id="txtDeadline">
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Images Link:</label>
                <input type="text" class="form-control" id="txtInputLink">
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group col-md-12 col-sm-12 col-xs-12">
                <label for="">Remark:</label>
                <input type="text" name="txtRemark" id="txtRemark" class="form-control" placeholder="Task remark">
              </div>
            </div>

            <hr />
            <div class="row">
              <div class="col-xs-6">
                <div class="form-check mt-1">
                  <input class="form-check-input" type="checkbox" value="" id="ckbAssignEditor" />
                  <label class="form-check-label" for="defaultCheck1">
                    Assign Editor
                  </label>
                </div>
              </div>
              <div class="col-xs-6">
                <div class="form-check mt-1">
                  <input class="form-check-input" type="checkbox" value="" id="ckbAssignQA" />
                  <label class="form-check-label" for="defaultCheck1">
                    Assign Q.A
                  </label>
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                <div id="colEditor">
                  <select name="" id="slEditor" class="form-control"></select>
                </div>
              </div>
              <div class="form-group mt-2 col-md-6 col-sm-6 col-xs-12">
                <div id="colQA">
                  <select name="" id="slQA" class="form-control"></select>
                </div>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12">
                <label for="" class="font-weight-bold text-danger" id="lblError"></label>
              </div>
            </div>

            <div class="row mt-2">
              <div class="col-md-12 col-sm-12 col-xs-12 text-center">
                <button class="btn btn-success" id="btnSubmit">
                  <i class="fa fa-floppy-o" aria-hidden="true"></i> Submit changes
                </button>
              </div>
            </div>


          </div>

        </div>



        <div class="form-row">
          <div class="col-sm-12">
            <label class="font-weight-bold text-danger mt-3" id="msgError"></label>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>




<script type="text/javascript">
  let idx = 1;
  var taskId = '';
  var levelId = '';


  //sự kiện click button sửa task trên table

  $(document).on("click", "button[name='btnEditTask']", function () {
    taskId = $(this).closest("tr").attr("id");
    levelId = $(this).closest("tr").data('level');

    $.ajax({
      url: '/tla/task/detail',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        taskId
      },
      success: function (data) {




        $('#divAddOrUpdateTask').slideUp(200);
        $('#divAddOrUpdateTask').slideDown(1000);

        $('#slJobLevels').val(data.task.level._id);
        $('#slJobLevels').attr("disabled", true);

        $('#txtAssignDate').val(convertISODateToTimeFormat(data.task.assigned_date));
        $('#txtDeadline').val(convertISODateToTimeFormat(data.task.deadline));
        $('#txtInputLink').val(data.task.input_link);

        $('#txtRemark').val(data.task.remarks[0].content);

        LoadEditor(data.task.level._id);
        LoadQA(data.task.level._id);

        //xu ly checkbox va dropdown lien quan toi editor va qa
        $('#ckbAssignEditor').prop('checked', data.task.editor_assigned);
        $('#ckbAssignQA').prop('checked', data.task.qa_assigned);

        if (data.task.editor_assigned) {
          $('#colEditor').show();
          $('#slEditor').val(data.task.editor);
          if (data.task.status > 0) {
            $('#ckbAssignEditor').attr("disabled", true);
            $('#slEditor').attr("disabled", true);
          } else {
            $('#ckbAssignEditor').attr("disabled", false);
            $('#slEditor').attr("disabled", false);
          }
        } else {
          $('#colEditor').hide();
        }

        if (data.task.qa_assigned) {
          $('#colQA').show();
          $('#slQA').val(data.task.qa);
          if (data.task.status > 1) {
            $('#ckbAssignQA').attr("disabled", true);
            $('#slQA').attr("disabled", true);
          } else {
            $('#ckbAssignQA').attr("disabled", false);
            $('#slQA').attr("disabled", false);
          }
        } else {
          $('#colQA').hide();
        }
      }
    })
  })

  $(document).on("click", "button[name='btnAssignStaffAuto']", function () {

    if (confirm('Are you sure want to set editor automatically?')) {
      $.ajax({
        url: '/tla/queue',
        type: 'post',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          taskId: $(this).closest("tr").attr('id')
        },
        success: function (data) {
          alert(data.msg);
          LoadTasks();
        },
        error: function (jqXHR, textStatus, errorThrown) {
          alert(jqXHR.responseJSON.msg);
        }
      })
    }

  })



  $('#btnAddTask').click(function () {
    $('#divAddOrUpdateTask').slideDown(1000);
    $('#divAssign').slideUp(200);
    $('#divEditTask').slideUp(200);
    $("button[name='btnAssignStaff']").show(100);
    $("button[name='btnDelTask']").show(100);

    $('#slJobLevels').attr("disabled", false);


    taskId = '';
    $('#colEditor').hide();
    $('#colQA').hide();
    $('#ckbAssignEditor').prop('checked', false);
    $('#ckbAssignQA').prop('checked', false);
    $('#txtInputLink').val('');
    LoadEditor($('#slJobLevels option:selected').val());
    LoadQA($('#slJobLevels option:selected').val());
  })

  $('.btnCancel').on('click', function () {
    $('#divAddOrUpdateTask').slideUp(500);
    $("button[name='btnAssignStaff']").show(100);
    $("button[name='btnDelTask']").show(100);
    taskId = '';
  })

  $("#JobMngrModal").on('shown.bs.modal', function (e) {
    LoadTasks();
    LoadJobLevels();
    LoadJob();

    $('#divLevel').hide();
    $('#divEditTask').hide();
    $('#divAssign').hide();
    $('#divAddOrUpdateTask').hide();
    $('#txtAssignDate').val(getCurrentTime())
  });






  $(document).on("click", "button[name='btnEditTask']", function () {
    $('#divAssign').hide(100);
    $('#divLevel').hide(100);
    $('#divEditTask').slideDown(1000);

  })

  $(document).on("click", "button[name='btnAssignStaff']", function () {
    taskId = $(this).closest("tr").attr("id");
    levelId = $(this).closest("tr").data('level');

    if ($(this).closest("tr").data('editor') === 'undefined') {
      $('#divEditor').show();
    } else {
      $('#divEditor').hide();
    }

    if ($(this).closest("tr").data('qa') === 'undefined') {
      $('#divQA').show();
    } else {
      $('#divQA').hide();
    }


    LoadEditor();
    LoadQA();

    $('#divAssign').slideDown(1000);
    $('#divLevel').slideUp(500);
    $('#divEditTask').slideUp(500);
    $("button[name='btnAssignStaff']").fadeOut(100);
    $("button[name='btnDelTask']").fadeOut(100);
  })

  $(document).on("click", "button[name='btnDelTask']", function () {

    let _id = $(this).closest("tr").attr("id");
    if (confirm("Are you sure to delete this level?")) {
      $.ajax({
        url: '/tla/task',
        type: 'delete',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          _id
        },
        success: function (data) {
          $('#msgError').text(data.msg);
          $('#msgError').show();
          $('#msgError').hide(2000);
          LoadTasks();
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $('#msgError').text(jqXHR.responseJSON.msg);
        }
      })
    }
  })



  function LoadJob() {
    $.ajax({
      url: '/tla/job/detail',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        id: jobId
      },
      success: function (data, textStatus, xhr) {

        $('#customer_fullname').text(data.job.customer.firstname + ' ' + data.job.customer.lastname);
        $('#name_case').text(data.job.name);
        $('#job_intruction').text(data.job.intruction);
        $('#txtDeadline').val(convertISODateToTimeFormat(data.job.delivery_date));
        $('#style_note').text(data.job.customer.remark);
        $('#customer').text(data.job.customer.firstname + ' ' + data.job.customer.lastname);

        if (data.job.customer.has_fire) {
          if (data.job.customer.fire_note.trim().length > 0) {
            $('#customer_fire').html(data.job.customer.fire_note);
          } else {
            $('#customer_fire').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
          }
        } else {
          $('#customer_fire').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
        }

        if (data.job.customer.has_grass) {
          if (data.job.customer.grass_note.trim().length > 0) {
            $('#customer_grass').html(data.job.customer.grass_note);
          } else {
            $('#customer_grass').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
          }
        } else {
          $('#customer_grass').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
        }

        if (data.job.customer.has_sky) {
          if (data.job.customer.sky_note.trim().length > 0) {
            $('#customer_sky').html(data.job.customer.sky_note);
          } else {
            $('#customer_sky').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
          }
        } else {
          $('#customer_sky').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
        }

        if (data.job.customer.has_TV) {
          if (data.job.customer.TV_note.trim().length > 0) {
            $('#customer_tv').html(data.job.customer.TV_note);
          } else {
            $('#customer_tv').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
          }
        } else {
          $('#customer_tv').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
        }

        if (data.job.customer.is_align) {
          if (data.job.customer.align_note.trim().length > 0) {
            $('#customer_align').html(data.job.customer.align_note);
          } else {
            $('#customer_align').html('<i class="fa fa-check-square-o text-success" aria-hidden="true"></i>');
          }
        } else {
          $('#customer_align').html('<i class="fa fa-square-o" aria-hidden="true"></i>');
        }



        $('#customer_colormode').html('<i class="text-warning font-weight-bold">' + data.job.customer.color.name + '</i>')
        $('#customer_cloud').html('<i class="text-warning font-weight-bold">' + data.job.customer.cloud.name + '</i>')
        $('#customer_nationalstyle').html('<i class="text-warning font-weight-bold">' + data.job.customer.nation.name + '</i>')
        $('#customer_output').html('<i class="text-warning font-weight-bold">' + data.job.customer.output.name + '</i>')
        $('#customer_size').html('<i class="text-warning font-weight-bold">' + data.job.customer.size.name + '</i>')

      }
    })
  }

  function LoadTasks() {
    $.ajax({
      url: '/tla/task/list',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        jobId
      },
      success: function (data) {
        let idx = 1;
        $("#tblTasks").empty();
        data.tasks.forEach(t => {
          let tr = '<tr id="' + t._id + '" data-level="' + t.level._id + '" data-editor="';
          tr += t.editor;
          tr += '" data-qa="';
          tr += t.qa;
          tr += '">';

          tr += "<td>" + idx++ + "</td>";


          tr += "<td class='font-weight-bold text-info'>" + t.level.name + "</td>";
          tr += "<td>" + convertISODateToTimeFormat(t.assigned_date) + "</td>";
          tr += "<td>" + convertISODateToTimeFormat(t.deadline) + "</td>";
          tr += '<td>';
          if (typeof t.remarks[0] !== 'undefined') {
            tr += t.remarks[0].content;
          }
          tr += '</td>';


          tr += '<td>';
          if (typeof t.editor !== 'undefined' && t.editor !== null)
            tr += t.editor.fullname;
          tr += "</td>";

          tr += '<td>';
          if (typeof t.qa !== 'undefined' && t.qa !== null)
            tr += t.qa.fullname;
          tr += '</td>'


          tr += '<td>';
          if (isValidHttpUrl(t.input_link)) {
            tr += '<a href="' + t.input_link + '" target="_blank">Link</a>'
          } else {
            tr += t.input_link
          }

          tr += '</td>';


          tr += '<td class="font-italic">';
          switch (t.status) {

            case 0: tr += '<span class="text-info">Processing</span>'; break;
            case 1: {
              if (t.edited_time > 1) {
                tr += '<span class="text-primary">Fixed</span>';
              } else {
                tr += '<span class="text-primary">Edited</span>';
              }
              break;
            }
            case 2: tr += '<span class="text-success">Q.A ok</span>'; break;
            case 3: tr += '<span class="text-success">DC ok</span>'; break;
            case -1: tr += '<span class="text-info">Initial</span>'; break;
            case -2: tr += '<span class="text-danger">Q.A reject</span>'; break;
            case -3: tr += '<span class="text-danger">DC reject</span>'; break;

          }
          tr += '</td>';



          tr += '<td class="text-right">';

          if (t.status == -1) {
            tr += '<button class="ml-2 btn btn-xs btn-primary" name="btnAssignStaffAuto"><i class="fa fa-refresh" aria-hidden="true"></i> ASE</button>';
          }

          if (t.status < 1) {
            tr += '<button class="ml-1 btn btn-xs btn-danger" name="btnDelTask"><i class="fa fa-trash text-white" aria-hidden="true"></i></button>';
          }

          tr += '<button class="ml-1 btn btn-xs btn-warning" name="btnEditTask"><i class="fa fa-edit"></i></button>';
          tr += '</td>';

          tr += "</tr>";

          $("#tblTasks").append(tr);
        })
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
        $('#msgError').show().delay(3000).fadeOut();
      },
    });
  }

  function LoadJobLevels() {

    $.ajax({
      url: '/tla/job-level',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        customerId
      },

      success: function (data) {
        $('#slJobLevels').empty();
        data.jl.forEach(j => {
          let opt = '<option value="' + j._id + '" class="font-weight-bold text-danger">' + j.name + '</option>';
          $('#slJobLevels').append(opt);
        })
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
      },
    })
  }



  $("#ckbAssignEditor").change(function () {
    if (this.checked) {
      $('#colEditor').slideDown(500);
    } else {
      $('#colEditor').slideUp(500);
    }
  });
  $("#ckbAssignQA").change(function () {
    if (this.checked) {
      $('#colQA').slideDown(500);
    } else {
      $('#colQA').slideUp(500);
    }
  });

  $("#btnSubmit").click(function () {
    let level = $("#slJobLevels option:selected").val();
    let name = $("#slJobLevels option:selected").text();

    let assigned_date = strToDate($('#txtAssignDate').val());
    let deadline = strToDate($('#txtDeadline').val());
    let input_link = $('#txtInputLink').val();
    let remark = $('#txtRemark').val();

    let editor_assigned = $("#ckbAssignEditor").is(':checked') ? true : false;
    let qa_assigned = $("#ckbAssignQA").is(':checked') ? true : false;
    let editor = $('#slEditor option:selected').val();
    let qa = $('#slQA option:selected').val();

    if (editor_assigned && typeof editor === 'undefined') {
      $('#msgError').text('(*) No editor is assigned!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }

    if (qa_assigned && typeof qa === 'undefined') {
      $('#msgError').text('(*) No Q.A is assigned!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }

    // validateion component inputs

    if (isNaN(assigned_date) || assigned_date === null || isNaN(deadline) || deadline == null) {
      $('#msgError').text('(*) Assign date or deadline is invalid!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }


    if (deadline < new Date($.now())) {
      $('#msgError').text('(*) deadline must be later than current time!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }

    if (deadline <= assigned_date) {
      $('#msgError').text('(*) deadline must be greater than assign date!');
      $('#msgError').show().delay(3000).fadeOut();
      return;
    }

    if (taskId.trim().length == 0) {
      $.ajax({
        url: '/tla/task',
        type: 'post',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          job: jobId,
          level,
          assigned_date,
          deadline,
          input_link,
          remark,
          qa_assigned,
          editor_assigned,
          qa,
          editor
        },
        success: function (data) {
          alert(data.msg);
          LoadTasks();         
          $('#divAddOrUpdateTask').slideUp(500);
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
          $('#msgError').show().delay(3000).fadeOut();
        },
      })
    } else {
      $.ajax({
        url: '/tla/task',
        type: 'put',
        headers: {
          authorization: "Bearer " + localStorage.getItem("accessToken"),
        },
        data: {
          taskId,
          assigned_date,
          deadline,
          input_link,
          remark,
          qa_assigned,
          editor_assigned,
          qa,
          editor
        },
        success: function (data) {
          alert(data.msg);
          LoadTasks();
          LoadJob();
          $('#txtInputLink').val('');
          $('#divAddOrUpdateTask').slideUp(500);
        },
        error: function (jqXHR, textStatus, errorThrown) {
          $('#msgError').text(`(!) ${jqXHR.responseJSON.msg}`);
          $('#msgError').show().delay(3000).fadeOut();
        },
      })
    }

  });




  $("#slJobLevels").change(function () {
    let levelId = $("#slJobLevels option:selected").val();
    LoadEditor(levelId);
    LoadQA(levelId);
  });

  function LoadJobLevels() {

    $.ajax({
      url: '/tla/job-level',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        customerId
      },

      success: function (data) {
        $('#slJobLevels').empty();
        data.jl.forEach(j => {
          let opt = '<option value="' + j._id + '" class="font-weight-bold text-danger">' + j.name + '</option>';
          $('#slJobLevels').append(opt);
        })
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
      },
    })
  }

  function LoadEditor(levelId) {
    $.ajax({
      url: '/tla/user/list-editor',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        levelId
      },
      success: function (data) {
        $('#slEditor').empty();
        data.editors.forEach(e => {
          let opt = '<option value="' + e._id + '">' + e.fullname + '</option>';
          $('#slEditor').append(opt);
          $('#slEditorInEditDiv').append(opt);
        })
        $('#slEditor').selectpicker();
        $('#slEditor').selectpicker('refresh');
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
      },
    })
  }


  function LoadQA(levelId) {
    $.ajax({
      url: '/tla/user/list-qa',
      type: 'get',
      headers: {
        authorization: "Bearer " + localStorage.getItem("accessToken"),
      },
      data: {
        levelId
      },
      success: function (data) {
        $('#slQA').empty();
        $('#slQAInEditDiv').empty();
        data.qas.forEach(q => {
          let opt = '<option value="' + q._id + '">' + q.fullname + '</option>';
          $('#slQA').append(opt);
          $('#slQAInEditDiv').append(opt);
        })
        $('#slQA').selectpicker();
        $('#slQAInEditDiv').selectpicker();
        $('#slQA').selectpicker('refresh');
        $('#slQAInEditDiv').selectpicker('refresh');
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $('#msgError').text(jqXHR.responseJSON.msg);
      },
    })
  }



  $('.inputDate').inputmask("datetime", {
    mask: "1/2/y h:s",
    placeholder: "dd/mm/yyyy hh:mm",
    leapday: "-02-29",
    separator: "/",
    alias: "dd/mm/yyyy hh:mm"
  })




</script>